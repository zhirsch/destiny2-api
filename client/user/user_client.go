// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
UserGetAvailableThemes Returns a list of all available user themes.
*/
func (a *Client) UserGetAvailableThemes(params *UserGetAvailableThemesParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetAvailableThemesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetAvailableThemesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.GetAvailableThemes",
		Method:             "GET",
		PathPattern:        "/User/GetAvailableThemes/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGetAvailableThemesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserGetAvailableThemesOK), nil

}

/*
UserGetBungieNetUserByID Loads a bungienet user by membership id.
*/
func (a *Client) UserGetBungieNetUserByID(params *UserGetBungieNetUserByIDParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetBungieNetUserByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetBungieNetUserByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.GetBungieNetUserById",
		Method:             "GET",
		PathPattern:        "/User/GetBungieNetUserById/{id}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGetBungieNetUserByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserGetBungieNetUserByIDOK), nil

}

/*
UserGetMembershipDataByID Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.
*/
func (a *Client) UserGetMembershipDataByID(params *UserGetMembershipDataByIDParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetMembershipDataByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetMembershipDataByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.GetMembershipDataById",
		Method:             "GET",
		PathPattern:        "/User/GetMembershipsById/{membershipId}/{membershipType}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGetMembershipDataByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserGetMembershipDataByIDOK), nil

}

/*
UserGetMembershipDataForCurrentUser Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.
*/
func (a *Client) UserGetMembershipDataForCurrentUser(params *UserGetMembershipDataForCurrentUserParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetMembershipDataForCurrentUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetMembershipDataForCurrentUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.GetMembershipDataForCurrentUser",
		Method:             "GET",
		PathPattern:        "/User/GetMembershipsForCurrentUser/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGetMembershipDataForCurrentUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserGetMembershipDataForCurrentUserOK), nil

}

/*
UserGetPartnerships Returns a user's linked Partnerships.
*/
func (a *Client) UserGetPartnerships(params *UserGetPartnershipsParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetPartnershipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetPartnershipsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.GetPartnerships",
		Method:             "GET",
		PathPattern:        "/User/{membershipId}/Partnerships/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGetPartnershipsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserGetPartnershipsOK), nil

}

/*
UserGetUserAliases Loads aliases of a bungienet membership id.
*/
func (a *Client) UserGetUserAliases(params *UserGetUserAliasesParams, authInfo runtime.ClientAuthInfoWriter) (*UserGetUserAliasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetUserAliasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.GetUserAliases",
		Method:             "GET",
		PathPattern:        "/User/GetUserAliases/{id}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGetUserAliasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserGetUserAliasesOK), nil

}

/*
UserSearchUsers Returns a list of possible users based on the search string
*/
func (a *Client) UserSearchUsers(params *UserSearchUsersParams, authInfo runtime.ClientAuthInfoWriter) (*UserSearchUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserSearchUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "User.SearchUsers",
		Method:             "GET",
		PathPattern:        "/User/SearchUsers/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserSearchUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserSearchUsersOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
