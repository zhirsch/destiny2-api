// Code generated by go-swagger; DO NOT EDIT.

package group_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new group v2 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for group v2 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GroupV2AbdicateFoundership An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
*/
func (a *Client) GroupV2AbdicateFoundership(params *GroupV2AbdicateFoundershipParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2AbdicateFoundershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2AbdicateFoundershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.AbdicateFoundership",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/Admin/AbdicateFoundership/{membershipType}/{founderIdNew}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2AbdicateFoundershipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2AbdicateFoundershipOK), nil

}

/*
GroupV2AddOptionalConversation Add a new optional conversation/chat channel. Requires admin permissions to the group.
*/
func (a *Client) GroupV2AddOptionalConversation(params *GroupV2AddOptionalConversationParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2AddOptionalConversationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2AddOptionalConversationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.AddOptionalConversation",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/OptionalConversations/Add/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2AddOptionalConversationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2AddOptionalConversationOK), nil

}

/*
GroupV2ApproveAllPending Approve all of the pending users for the given group.
*/
func (a *Client) GroupV2ApproveAllPending(params *GroupV2ApproveAllPendingParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2ApproveAllPendingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2ApproveAllPendingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.ApproveAllPending",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/Members/ApproveAll/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2ApproveAllPendingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2ApproveAllPendingOK), nil

}

/*
GroupV2ApprovePendingForList Approve all of the pending users for the given group.
*/
func (a *Client) GroupV2ApprovePendingForList(params *GroupV2ApprovePendingForListParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2ApprovePendingForListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2ApprovePendingForListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.ApprovePendingForList",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/Members/ApproveList/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2ApprovePendingForListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2ApprovePendingForListOK), nil

}

/*
GroupV2BanMember Bans the requested member from the requested group for the specified period of time.
*/
func (a *Client) GroupV2BanMember(params *GroupV2BanMemberParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2BanMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2BanMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.BanMember",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Ban/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2BanMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2BanMemberOK), nil

}

/*
GroupV2CreateGroup Create a new group.
*/
func (a *Client) GroupV2CreateGroup(params *GroupV2CreateGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2CreateGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2CreateGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.CreateGroup",
		Method:             "POST",
		PathPattern:        "/GroupV2/Create/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2CreateGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2CreateGroupOK), nil

}

/*
GroupV2DenyAllPending Deny all of the pending users for the given group.
*/
func (a *Client) GroupV2DenyAllPending(params *GroupV2DenyAllPendingParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2DenyAllPendingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2DenyAllPendingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.DenyAllPending",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/Members/DenyAll/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2DenyAllPendingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2DenyAllPendingOK), nil

}

/*
GroupV2DenyPendingForList Deny all of the pending users for the given group that match the passed-in .
*/
func (a *Client) GroupV2DenyPendingForList(params *GroupV2DenyPendingForListParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2DenyPendingForListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2DenyPendingForListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.DenyPendingForList",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/Members/DenyList/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2DenyPendingForListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2DenyPendingForListOK), nil

}

/*
GroupV2EditClanBanner Edit an existing group's clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
*/
func (a *Client) GroupV2EditClanBanner(params *GroupV2EditClanBannerParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2EditClanBannerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2EditClanBannerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.EditClanBanner",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/EditClanBanner/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2EditClanBannerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2EditClanBannerOK), nil

}

/*
GroupV2EditFounderOptions Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
*/
func (a *Client) GroupV2EditFounderOptions(params *GroupV2EditFounderOptionsParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2EditFounderOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2EditFounderOptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.EditFounderOptions",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/EditFounderOptions/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2EditFounderOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2EditFounderOptionsOK), nil

}

/*
GroupV2EditGroup Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
*/
func (a *Client) GroupV2EditGroup(params *GroupV2EditGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2EditGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2EditGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.EditGroup",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/Edit/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2EditGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2EditGroupOK), nil

}

/*
GroupV2EditGroupMembership Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
*/
func (a *Client) GroupV2EditGroupMembership(params *GroupV2EditGroupMembershipParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2EditGroupMembershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2EditGroupMembershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.EditGroupMembership",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/SetMembershipType/{memberType}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2EditGroupMembershipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2EditGroupMembershipOK), nil

}

/*
GroupV2EditOptionalConversation Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
*/
func (a *Client) GroupV2EditOptionalConversation(params *GroupV2EditOptionalConversationParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2EditOptionalConversationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2EditOptionalConversationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.EditOptionalConversation",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/OptionalConversations/Edit/{conversationId}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2EditOptionalConversationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2EditOptionalConversationOK), nil

}

/*
GroupV2GetAdminsAndFounderOfGroup Get the list of members in a given group who are of admin level or higher.
*/
func (a *Client) GroupV2GetAdminsAndFounderOfGroup(params *GroupV2GetAdminsAndFounderOfGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2GetAdminsAndFounderOfGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2GetAdminsAndFounderOfGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.GetAdminsAndFounderOfGroup",
		Method:             "GET",
		PathPattern:        "/GroupV2/{groupId}/AdminsAndFounder/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2GetAdminsAndFounderOfGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2GetAdminsAndFounderOfGroupOK), nil

}

/*
GroupV2GetAvailableAvatars Returns a list of all available group avatars for the signed-in user.
*/
func (a *Client) GroupV2GetAvailableAvatars(params *GroupV2GetAvailableAvatarsParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2GetAvailableAvatarsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2GetAvailableAvatarsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.GetAvailableAvatars",
		Method:             "GET",
		PathPattern:        "/GroupV2/GetAvailableAvatars/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2GetAvailableAvatarsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2GetAvailableAvatarsOK), nil

}

/*
GroupV2GetAvailableThemes Returns a list of all available group themes.
*/
func (a *Client) GroupV2GetAvailableThemes(params *GroupV2GetAvailableThemesParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2GetAvailableThemesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2GetAvailableThemesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.GetAvailableThemes",
		Method:             "GET",
		PathPattern:        "/GroupV2/GetAvailableThemes/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2GetAvailableThemesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2GetAvailableThemesOK), nil

}

/*
GroupV2GetBannedMembersOfGroup Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
*/
func (a *Client) GroupV2GetBannedMembersOfGroup(params *GroupV2GetBannedMembersOfGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2GetBannedMembersOfGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2GetBannedMembersOfGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.GetBannedMembersOfGroup",
		Method:             "GET",
		PathPattern:        "/GroupV2/{groupId}/Banned/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2GetBannedMembersOfGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2GetBannedMembersOfGroupOK), nil

}

/*
GroupV2GetGroup Get information about a specific group of the given ID.
*/
func (a *Client) GroupV2GetGroup(params *GroupV2GetGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2GetGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2GetGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.GetGroup",
		Method:             "GET",
		PathPattern:        "/GroupV2/{groupId}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2GetGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2GetGroupOK), nil

}

/*
GroupV2GetGroupByName Get information about a specific group with the given name and type.
*/
func (a *Client) GroupV2GetGroupByName(params *GroupV2GetGroupByNameParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2GetGroupByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2GetGroupByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.GetGroupByName",
		Method:             "GET",
		PathPattern:        "/GroupV2/Name/{groupName}/{groupType}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2GetGroupByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2GetGroupByNameOK), nil

}

/*
GroupV2GetGroupOptionalConversations Gets a list of available optional conversation channels and their settings.
*/
func (a *Client) GroupV2GetGroupOptionalConversations(params *GroupV2GetGroupOptionalConversationsParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2GetGroupOptionalConversationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2GetGroupOptionalConversationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.GetGroupOptionalConversations",
		Method:             "GET",
		PathPattern:        "/GroupV2/{groupId}/OptionalConversations/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2GetGroupOptionalConversationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2GetGroupOptionalConversationsOK), nil

}

/*
GroupV2GetGroupsForMember Get information about the groups that a given member has joined.
*/
func (a *Client) GroupV2GetGroupsForMember(params *GroupV2GetGroupsForMemberParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2GetGroupsForMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2GetGroupsForMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.GetGroupsForMember",
		Method:             "GET",
		PathPattern:        "/GroupV2/User/{membershipType}/{membershipId}/{filter}/{groupType}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2GetGroupsForMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2GetGroupsForMemberOK), nil

}

/*
GroupV2GetInvitedIndividuals Get the list of users who have been invited into the group.
*/
func (a *Client) GroupV2GetInvitedIndividuals(params *GroupV2GetInvitedIndividualsParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2GetInvitedIndividualsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2GetInvitedIndividualsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.GetInvitedIndividuals",
		Method:             "GET",
		PathPattern:        "/GroupV2/{groupId}/Members/InvitedIndividuals/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2GetInvitedIndividualsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2GetInvitedIndividualsOK), nil

}

/*
GroupV2GetMembersOfGroup Get the list of members in a given group.
*/
func (a *Client) GroupV2GetMembersOfGroup(params *GroupV2GetMembersOfGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2GetMembersOfGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2GetMembersOfGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.GetMembersOfGroup",
		Method:             "GET",
		PathPattern:        "/GroupV2/{groupId}/Members/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2GetMembersOfGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2GetMembersOfGroupOK), nil

}

/*
GroupV2GetPendingMemberships Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
*/
func (a *Client) GroupV2GetPendingMemberships(params *GroupV2GetPendingMembershipsParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2GetPendingMembershipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2GetPendingMembershipsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.GetPendingMemberships",
		Method:             "GET",
		PathPattern:        "/GroupV2/{groupId}/Members/Pending/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2GetPendingMembershipsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2GetPendingMembershipsOK), nil

}

/*
GroupV2GetPotentialGroupsForMember Get information about the groups that a given member has applied to or been invited to.
*/
func (a *Client) GroupV2GetPotentialGroupsForMember(params *GroupV2GetPotentialGroupsForMemberParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2GetPotentialGroupsForMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2GetPotentialGroupsForMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.GetPotentialGroupsForMember",
		Method:             "GET",
		PathPattern:        "/GroupV2/User/Potential/{membershipType}/{membershipId}/{filter}/{groupType}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2GetPotentialGroupsForMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2GetPotentialGroupsForMemberOK), nil

}

/*
GroupV2GetRecommendedGroups Gets groups recommended for you based on the groups to whom those you follow belong.
*/
func (a *Client) GroupV2GetRecommendedGroups(params *GroupV2GetRecommendedGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2GetRecommendedGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2GetRecommendedGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.GetRecommendedGroups",
		Method:             "POST",
		PathPattern:        "/GroupV2/Recommended/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2GetRecommendedGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2GetRecommendedGroupsOK), nil

}

/*
GroupV2GetUserClanInviteSetting Gets the state of the user's clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
*/
func (a *Client) GroupV2GetUserClanInviteSetting(params *GroupV2GetUserClanInviteSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2GetUserClanInviteSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2GetUserClanInviteSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.GetUserClanInviteSetting",
		Method:             "GET",
		PathPattern:        "/GroupV2/GetUserClanInviteSetting/{mType}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2GetUserClanInviteSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2GetUserClanInviteSettingOK), nil

}

/*
GroupV2GroupSearch Search for Groups.
*/
func (a *Client) GroupV2GroupSearch(params *GroupV2GroupSearchParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2GroupSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2GroupSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.GroupSearch",
		Method:             "POST",
		PathPattern:        "/GroupV2/Search/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2GroupSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2GroupSearchOK), nil

}

/*
GroupV2IndividualGroupInvite Invite a user to join this group.
*/
func (a *Client) GroupV2IndividualGroupInvite(params *GroupV2IndividualGroupInviteParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2IndividualGroupInviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2IndividualGroupInviteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.IndividualGroupInvite",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/Members/IndividualInvite/{membershipType}/{membershipId}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2IndividualGroupInviteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2IndividualGroupInviteOK), nil

}

/*
GroupV2IndividualGroupInviteCancel Cancels a pending invitation to join a group.
*/
func (a *Client) GroupV2IndividualGroupInviteCancel(params *GroupV2IndividualGroupInviteCancelParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2IndividualGroupInviteCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2IndividualGroupInviteCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.IndividualGroupInviteCancel",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/Members/IndividualInviteCancel/{membershipType}/{membershipId}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2IndividualGroupInviteCancelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2IndividualGroupInviteCancelOK), nil

}

/*
GroupV2KickMember Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
*/
func (a *Client) GroupV2KickMember(params *GroupV2KickMemberParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2KickMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2KickMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.KickMember",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Kick/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2KickMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2KickMemberOK), nil

}

/*
GroupV2RequestGroupMembership Request permission to join the given group.
*/
func (a *Client) GroupV2RequestGroupMembership(params *GroupV2RequestGroupMembershipParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2RequestGroupMembershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2RequestGroupMembershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.RequestGroupMembership",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/Members/Apply/{membershipType}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2RequestGroupMembershipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2RequestGroupMembershipOK), nil

}

/*
GroupV2RescindGroupMembership Rescind your application to join the given group or leave the group if you are already a member..
*/
func (a *Client) GroupV2RescindGroupMembership(params *GroupV2RescindGroupMembershipParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2RescindGroupMembershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2RescindGroupMembershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.RescindGroupMembership",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/Members/Rescind/{membershipType}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2RescindGroupMembershipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2RescindGroupMembershipOK), nil

}

/*
GroupV2SetUserClanInviteSetting Sets the state of the user's clan invite preferences - true if they wish to be invited to clans, false otherwise.
*/
func (a *Client) GroupV2SetUserClanInviteSetting(params *GroupV2SetUserClanInviteSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2SetUserClanInviteSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2SetUserClanInviteSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.SetUserClanInviteSetting",
		Method:             "POST",
		PathPattern:        "/GroupV2/SetUserClanInviteSetting/{mType}/{allowInvites}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2SetUserClanInviteSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2SetUserClanInviteSettingOK), nil

}

/*
GroupV2UnbanMember Unbans the requested member, allowing them to re-apply for membership.
*/
func (a *Client) GroupV2UnbanMember(params *GroupV2UnbanMemberParams, authInfo runtime.ClientAuthInfoWriter) (*GroupV2UnbanMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupV2UnbanMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupV2.UnbanMember",
		Method:             "POST",
		PathPattern:        "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Unban/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupV2UnbanMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupV2UnbanMemberOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
