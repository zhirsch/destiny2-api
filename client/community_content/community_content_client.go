// Code generated by go-swagger; DO NOT EDIT.

package community_content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new community content API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for community content API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CommunityContentGetCommunityContent Returns community content.
*/
func (a *Client) CommunityContentGetCommunityContent(params *CommunityContentGetCommunityContentParams, authInfo runtime.ClientAuthInfoWriter) (*CommunityContentGetCommunityContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommunityContentGetCommunityContentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CommunityContent.GetCommunityContent",
		Method:             "GET",
		PathPattern:        "/CommunityContent/Get/{sort}/{mediaFilter}/{page}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CommunityContentGetCommunityContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CommunityContentGetCommunityContentOK), nil

}

/*
CommunityContentGetCommunityLiveStatuses Returns info about community members who are live streaming.
*/
func (a *Client) CommunityContentGetCommunityLiveStatuses(params *CommunityContentGetCommunityLiveStatusesParams, authInfo runtime.ClientAuthInfoWriter) (*CommunityContentGetCommunityLiveStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommunityContentGetCommunityLiveStatusesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CommunityContent.GetCommunityLiveStatuses",
		Method:             "GET",
		PathPattern:        "/CommunityContent/Live/All/{partnershipType}/{sort}/{page}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CommunityContentGetCommunityLiveStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CommunityContentGetCommunityLiveStatusesOK), nil

}

/*
CommunityContentGetCommunityLiveStatusesForClanmates Returns info about community members who are live streaming in your clans.
*/
func (a *Client) CommunityContentGetCommunityLiveStatusesForClanmates(params *CommunityContentGetCommunityLiveStatusesForClanmatesParams, authInfo runtime.ClientAuthInfoWriter) (*CommunityContentGetCommunityLiveStatusesForClanmatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommunityContentGetCommunityLiveStatusesForClanmatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CommunityContent.GetCommunityLiveStatusesForClanmates",
		Method:             "GET",
		PathPattern:        "/CommunityContent/Live/Clan/{partnershipType}/{sort}/{page}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CommunityContentGetCommunityLiveStatusesForClanmatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CommunityContentGetCommunityLiveStatusesForClanmatesOK), nil

}

/*
CommunityContentGetCommunityLiveStatusesForFriends Returns info about community members who are live streaming among your friends.
*/
func (a *Client) CommunityContentGetCommunityLiveStatusesForFriends(params *CommunityContentGetCommunityLiveStatusesForFriendsParams, authInfo runtime.ClientAuthInfoWriter) (*CommunityContentGetCommunityLiveStatusesForFriendsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommunityContentGetCommunityLiveStatusesForFriendsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CommunityContent.GetCommunityLiveStatusesForFriends",
		Method:             "GET",
		PathPattern:        "/CommunityContent/Live/Friends/{partnershipType}/{sort}/{page}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CommunityContentGetCommunityLiveStatusesForFriendsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CommunityContentGetCommunityLiveStatusesForFriendsOK), nil

}

/*
CommunityContentGetFeaturedCommunityLiveStatuses Returns info about Featured live streams.
*/
func (a *Client) CommunityContentGetFeaturedCommunityLiveStatuses(params *CommunityContentGetFeaturedCommunityLiveStatusesParams, authInfo runtime.ClientAuthInfoWriter) (*CommunityContentGetFeaturedCommunityLiveStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommunityContentGetFeaturedCommunityLiveStatusesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CommunityContent.GetFeaturedCommunityLiveStatuses",
		Method:             "GET",
		PathPattern:        "/CommunityContent/Live/Featured/{partnershipType}/{sort}/{page}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CommunityContentGetFeaturedCommunityLiveStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CommunityContentGetFeaturedCommunityLiveStatusesOK), nil

}

/*
CommunityContentGetStreamingStatusForMember Gets the Live Streaming status of a particular Account and Membership Type.
*/
func (a *Client) CommunityContentGetStreamingStatusForMember(params *CommunityContentGetStreamingStatusForMemberParams, authInfo runtime.ClientAuthInfoWriter) (*CommunityContentGetStreamingStatusForMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommunityContentGetStreamingStatusForMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CommunityContent.GetStreamingStatusForMember",
		Method:             "GET",
		PathPattern:        "/CommunityContent/Live/Users/{partnershipType}/{membershipType}/{membershipId}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CommunityContentGetStreamingStatusForMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CommunityContentGetStreamingStatusForMemberOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
