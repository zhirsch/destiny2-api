// Code generated by go-swagger; DO NOT EDIT.

package community_content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCommunityContentGetCommunityContentParams creates a new CommunityContentGetCommunityContentParams object
// with the default values initialized.
func NewCommunityContentGetCommunityContentParams() *CommunityContentGetCommunityContentParams {
	var ()
	return &CommunityContentGetCommunityContentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCommunityContentGetCommunityContentParamsWithTimeout creates a new CommunityContentGetCommunityContentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCommunityContentGetCommunityContentParamsWithTimeout(timeout time.Duration) *CommunityContentGetCommunityContentParams {
	var ()
	return &CommunityContentGetCommunityContentParams{

		timeout: timeout,
	}
}

// NewCommunityContentGetCommunityContentParamsWithContext creates a new CommunityContentGetCommunityContentParams object
// with the default values initialized, and the ability to set a context for a request
func NewCommunityContentGetCommunityContentParamsWithContext(ctx context.Context) *CommunityContentGetCommunityContentParams {
	var ()
	return &CommunityContentGetCommunityContentParams{

		Context: ctx,
	}
}

// NewCommunityContentGetCommunityContentParamsWithHTTPClient creates a new CommunityContentGetCommunityContentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCommunityContentGetCommunityContentParamsWithHTTPClient(client *http.Client) *CommunityContentGetCommunityContentParams {
	var ()
	return &CommunityContentGetCommunityContentParams{
		HTTPClient: client,
	}
}

/*CommunityContentGetCommunityContentParams contains all the parameters to send to the API endpoint
for the community content get community content operation typically these are written to a http.Request
*/
type CommunityContentGetCommunityContentParams struct {

	/*MediaFilter
	  The type of media to get

	*/
	MediaFilter int32
	/*Page
	  Zero based page

	*/
	Page int32
	/*Sort
	  The sort mode.

	*/
	Sort strfmt.Base64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the community content get community content params
func (o *CommunityContentGetCommunityContentParams) WithTimeout(timeout time.Duration) *CommunityContentGetCommunityContentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the community content get community content params
func (o *CommunityContentGetCommunityContentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the community content get community content params
func (o *CommunityContentGetCommunityContentParams) WithContext(ctx context.Context) *CommunityContentGetCommunityContentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the community content get community content params
func (o *CommunityContentGetCommunityContentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the community content get community content params
func (o *CommunityContentGetCommunityContentParams) WithHTTPClient(client *http.Client) *CommunityContentGetCommunityContentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the community content get community content params
func (o *CommunityContentGetCommunityContentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMediaFilter adds the mediaFilter to the community content get community content params
func (o *CommunityContentGetCommunityContentParams) WithMediaFilter(mediaFilter int32) *CommunityContentGetCommunityContentParams {
	o.SetMediaFilter(mediaFilter)
	return o
}

// SetMediaFilter adds the mediaFilter to the community content get community content params
func (o *CommunityContentGetCommunityContentParams) SetMediaFilter(mediaFilter int32) {
	o.MediaFilter = mediaFilter
}

// WithPage adds the page to the community content get community content params
func (o *CommunityContentGetCommunityContentParams) WithPage(page int32) *CommunityContentGetCommunityContentParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the community content get community content params
func (o *CommunityContentGetCommunityContentParams) SetPage(page int32) {
	o.Page = page
}

// WithSort adds the sort to the community content get community content params
func (o *CommunityContentGetCommunityContentParams) WithSort(sort strfmt.Base64) *CommunityContentGetCommunityContentParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the community content get community content params
func (o *CommunityContentGetCommunityContentParams) SetSort(sort strfmt.Base64) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *CommunityContentGetCommunityContentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param mediaFilter
	if err := r.SetPathParam("mediaFilter", swag.FormatInt32(o.MediaFilter)); err != nil {
		return err
	}

	// path param page
	if err := r.SetPathParam("page", swag.FormatInt32(o.Page)); err != nil {
		return err
	}

	// path param sort
	if err := r.SetPathParam("sort", o.Sort.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
