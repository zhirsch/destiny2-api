// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDestiny2GetLeaderboardsForCharacterParams creates a new Destiny2GetLeaderboardsForCharacterParams object
// with the default values initialized.
func NewDestiny2GetLeaderboardsForCharacterParams() *Destiny2GetLeaderboardsForCharacterParams {
	var ()
	return &Destiny2GetLeaderboardsForCharacterParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDestiny2GetLeaderboardsForCharacterParamsWithTimeout creates a new Destiny2GetLeaderboardsForCharacterParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDestiny2GetLeaderboardsForCharacterParamsWithTimeout(timeout time.Duration) *Destiny2GetLeaderboardsForCharacterParams {
	var ()
	return &Destiny2GetLeaderboardsForCharacterParams{

		timeout: timeout,
	}
}

// NewDestiny2GetLeaderboardsForCharacterParamsWithContext creates a new Destiny2GetLeaderboardsForCharacterParams object
// with the default values initialized, and the ability to set a context for a request
func NewDestiny2GetLeaderboardsForCharacterParamsWithContext(ctx context.Context) *Destiny2GetLeaderboardsForCharacterParams {
	var ()
	return &Destiny2GetLeaderboardsForCharacterParams{

		Context: ctx,
	}
}

// NewDestiny2GetLeaderboardsForCharacterParamsWithHTTPClient creates a new Destiny2GetLeaderboardsForCharacterParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDestiny2GetLeaderboardsForCharacterParamsWithHTTPClient(client *http.Client) *Destiny2GetLeaderboardsForCharacterParams {
	var ()
	return &Destiny2GetLeaderboardsForCharacterParams{
		HTTPClient: client,
	}
}

/*Destiny2GetLeaderboardsForCharacterParams contains all the parameters to send to the API endpoint
for the destiny2 get leaderboards for character operation typically these are written to a http.Request
*/
type Destiny2GetLeaderboardsForCharacterParams struct {

	/*CharacterID
	  The specific character to build the leaderboard around for the provided Destiny Membership.

	*/
	CharacterID int64
	/*DestinyMembershipID
	  The Destiny membershipId of the user to retrieve.

	*/
	DestinyMembershipID int64
	/*Maxtop
	  Maximum number of top players to return. Use a large number to get entire leaderboard.

	*/
	Maxtop *int32
	/*MembershipType
	  A valid non-BungieNet membership type.

	*/
	MembershipType int32
	/*Modes
	  List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.

	*/
	Modes *string
	/*Statid
	  ID of stat to return rather than returning all Leaderboard stats.

	*/
	Statid *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) WithTimeout(timeout time.Duration) *Destiny2GetLeaderboardsForCharacterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) WithContext(ctx context.Context) *Destiny2GetLeaderboardsForCharacterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) WithHTTPClient(client *http.Client) *Destiny2GetLeaderboardsForCharacterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCharacterID adds the characterID to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) WithCharacterID(characterID int64) *Destiny2GetLeaderboardsForCharacterParams {
	o.SetCharacterID(characterID)
	return o
}

// SetCharacterID adds the characterId to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) SetCharacterID(characterID int64) {
	o.CharacterID = characterID
}

// WithDestinyMembershipID adds the destinyMembershipID to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) WithDestinyMembershipID(destinyMembershipID int64) *Destiny2GetLeaderboardsForCharacterParams {
	o.SetDestinyMembershipID(destinyMembershipID)
	return o
}

// SetDestinyMembershipID adds the destinyMembershipId to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) SetDestinyMembershipID(destinyMembershipID int64) {
	o.DestinyMembershipID = destinyMembershipID
}

// WithMaxtop adds the maxtop to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) WithMaxtop(maxtop *int32) *Destiny2GetLeaderboardsForCharacterParams {
	o.SetMaxtop(maxtop)
	return o
}

// SetMaxtop adds the maxtop to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) SetMaxtop(maxtop *int32) {
	o.Maxtop = maxtop
}

// WithMembershipType adds the membershipType to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) WithMembershipType(membershipType int32) *Destiny2GetLeaderboardsForCharacterParams {
	o.SetMembershipType(membershipType)
	return o
}

// SetMembershipType adds the membershipType to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) SetMembershipType(membershipType int32) {
	o.MembershipType = membershipType
}

// WithModes adds the modes to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) WithModes(modes *string) *Destiny2GetLeaderboardsForCharacterParams {
	o.SetModes(modes)
	return o
}

// SetModes adds the modes to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) SetModes(modes *string) {
	o.Modes = modes
}

// WithStatid adds the statid to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) WithStatid(statid *string) *Destiny2GetLeaderboardsForCharacterParams {
	o.SetStatid(statid)
	return o
}

// SetStatid adds the statid to the destiny2 get leaderboards for character params
func (o *Destiny2GetLeaderboardsForCharacterParams) SetStatid(statid *string) {
	o.Statid = statid
}

// WriteToRequest writes these params to a swagger request
func (o *Destiny2GetLeaderboardsForCharacterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param characterId
	if err := r.SetPathParam("characterId", swag.FormatInt64(o.CharacterID)); err != nil {
		return err
	}

	// path param destinyMembershipId
	if err := r.SetPathParam("destinyMembershipId", swag.FormatInt64(o.DestinyMembershipID)); err != nil {
		return err
	}

	if o.Maxtop != nil {

		// query param maxtop
		var qrMaxtop int32
		if o.Maxtop != nil {
			qrMaxtop = *o.Maxtop
		}
		qMaxtop := swag.FormatInt32(qrMaxtop)
		if qMaxtop != "" {
			if err := r.SetQueryParam("maxtop", qMaxtop); err != nil {
				return err
			}
		}

	}

	// path param membershipType
	if err := r.SetPathParam("membershipType", swag.FormatInt32(o.MembershipType)); err != nil {
		return err
	}

	if o.Modes != nil {

		// query param modes
		var qrModes string
		if o.Modes != nil {
			qrModes = *o.Modes
		}
		qModes := qrModes
		if qModes != "" {
			if err := r.SetQueryParam("modes", qModes); err != nil {
				return err
			}
		}

	}

	if o.Statid != nil {

		// query param statid
		var qrStatid string
		if o.Statid != nil {
			qrStatid = *o.Statid
		}
		qStatid := qrStatid
		if qStatid != "" {
			if err := r.SetQueryParam("statid", qStatid); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
