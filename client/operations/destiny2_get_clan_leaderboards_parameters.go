// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDestiny2GetClanLeaderboardsParams creates a new Destiny2GetClanLeaderboardsParams object
// with the default values initialized.
func NewDestiny2GetClanLeaderboardsParams() *Destiny2GetClanLeaderboardsParams {
	var ()
	return &Destiny2GetClanLeaderboardsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDestiny2GetClanLeaderboardsParamsWithTimeout creates a new Destiny2GetClanLeaderboardsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDestiny2GetClanLeaderboardsParamsWithTimeout(timeout time.Duration) *Destiny2GetClanLeaderboardsParams {
	var ()
	return &Destiny2GetClanLeaderboardsParams{

		timeout: timeout,
	}
}

// NewDestiny2GetClanLeaderboardsParamsWithContext creates a new Destiny2GetClanLeaderboardsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDestiny2GetClanLeaderboardsParamsWithContext(ctx context.Context) *Destiny2GetClanLeaderboardsParams {
	var ()
	return &Destiny2GetClanLeaderboardsParams{

		Context: ctx,
	}
}

// NewDestiny2GetClanLeaderboardsParamsWithHTTPClient creates a new Destiny2GetClanLeaderboardsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDestiny2GetClanLeaderboardsParamsWithHTTPClient(client *http.Client) *Destiny2GetClanLeaderboardsParams {
	var ()
	return &Destiny2GetClanLeaderboardsParams{
		HTTPClient: client,
	}
}

/*Destiny2GetClanLeaderboardsParams contains all the parameters to send to the API endpoint
for the destiny2 get clan leaderboards operation typically these are written to a http.Request
*/
type Destiny2GetClanLeaderboardsParams struct {

	/*GroupID
	  Group ID of the clan whose leaderboards you wish to fetch.

	*/
	GroupID int64
	/*Maxtop
	  Maximum number of top players to return. Use a large number to get entire leaderboard.

	*/
	Maxtop *int32
	/*Modes
	  List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.

	*/
	Modes *string
	/*Statid
	  ID of stat to return rather than returning all Leaderboard stats.

	*/
	Statid *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the destiny2 get clan leaderboards params
func (o *Destiny2GetClanLeaderboardsParams) WithTimeout(timeout time.Duration) *Destiny2GetClanLeaderboardsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the destiny2 get clan leaderboards params
func (o *Destiny2GetClanLeaderboardsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the destiny2 get clan leaderboards params
func (o *Destiny2GetClanLeaderboardsParams) WithContext(ctx context.Context) *Destiny2GetClanLeaderboardsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the destiny2 get clan leaderboards params
func (o *Destiny2GetClanLeaderboardsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the destiny2 get clan leaderboards params
func (o *Destiny2GetClanLeaderboardsParams) WithHTTPClient(client *http.Client) *Destiny2GetClanLeaderboardsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the destiny2 get clan leaderboards params
func (o *Destiny2GetClanLeaderboardsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroupID adds the groupID to the destiny2 get clan leaderboards params
func (o *Destiny2GetClanLeaderboardsParams) WithGroupID(groupID int64) *Destiny2GetClanLeaderboardsParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the destiny2 get clan leaderboards params
func (o *Destiny2GetClanLeaderboardsParams) SetGroupID(groupID int64) {
	o.GroupID = groupID
}

// WithMaxtop adds the maxtop to the destiny2 get clan leaderboards params
func (o *Destiny2GetClanLeaderboardsParams) WithMaxtop(maxtop *int32) *Destiny2GetClanLeaderboardsParams {
	o.SetMaxtop(maxtop)
	return o
}

// SetMaxtop adds the maxtop to the destiny2 get clan leaderboards params
func (o *Destiny2GetClanLeaderboardsParams) SetMaxtop(maxtop *int32) {
	o.Maxtop = maxtop
}

// WithModes adds the modes to the destiny2 get clan leaderboards params
func (o *Destiny2GetClanLeaderboardsParams) WithModes(modes *string) *Destiny2GetClanLeaderboardsParams {
	o.SetModes(modes)
	return o
}

// SetModes adds the modes to the destiny2 get clan leaderboards params
func (o *Destiny2GetClanLeaderboardsParams) SetModes(modes *string) {
	o.Modes = modes
}

// WithStatid adds the statid to the destiny2 get clan leaderboards params
func (o *Destiny2GetClanLeaderboardsParams) WithStatid(statid *string) *Destiny2GetClanLeaderboardsParams {
	o.SetStatid(statid)
	return o
}

// SetStatid adds the statid to the destiny2 get clan leaderboards params
func (o *Destiny2GetClanLeaderboardsParams) SetStatid(statid *string) {
	o.Statid = statid
}

// WriteToRequest writes these params to a swagger request
func (o *Destiny2GetClanLeaderboardsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param groupId
	if err := r.SetPathParam("groupId", swag.FormatInt64(o.GroupID)); err != nil {
		return err
	}

	if o.Maxtop != nil {

		// query param maxtop
		var qrMaxtop int32
		if o.Maxtop != nil {
			qrMaxtop = *o.Maxtop
		}
		qMaxtop := swag.FormatInt32(qrMaxtop)
		if qMaxtop != "" {
			if err := r.SetQueryParam("maxtop", qMaxtop); err != nil {
				return err
			}
		}

	}

	if o.Modes != nil {

		// query param modes
		var qrModes string
		if o.Modes != nil {
			qrModes = *o.Modes
		}
		qModes := qrModes
		if qModes != "" {
			if err := r.SetQueryParam("modes", qModes); err != nil {
				return err
			}
		}

	}

	if o.Statid != nil {

		// query param statid
		var qrStatid string
		if o.Statid != nil {
			qrStatid = *o.Statid
		}
		qStatid := qrStatid
		if qStatid != "" {
			if err := r.SetQueryParam("statid", qStatid); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
