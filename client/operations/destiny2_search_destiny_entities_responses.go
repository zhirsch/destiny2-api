// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/zhirsch/destiny2-api/models"
)

// Destiny2SearchDestinyEntitiesReader is a Reader for the Destiny2SearchDestinyEntities structure.
type Destiny2SearchDestinyEntitiesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *Destiny2SearchDestinyEntitiesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDestiny2SearchDestinyEntitiesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDestiny2SearchDestinyEntitiesOK creates a Destiny2SearchDestinyEntitiesOK with default headers values
func NewDestiny2SearchDestinyEntitiesOK() *Destiny2SearchDestinyEntitiesOK {
	return &Destiny2SearchDestinyEntitiesOK{}
}

/*Destiny2SearchDestinyEntitiesOK handles this case with default header values.

The results of a search for Destiny content. This will be improved on over time, I've been doing some experimenting to see what might be useful.
*/
type Destiny2SearchDestinyEntitiesOK struct {
	Payload *models.Destiny2SearchDestinyEntitiesOKBody
}

func (o *Destiny2SearchDestinyEntitiesOK) Error() string {
	return fmt.Sprintf("[GET /Destiny2/Armory/Search/{type}/{searchTerm}/][%d] destiny2SearchDestinyEntitiesOK  %+v", 200, o.Payload)
}

func (o *Destiny2SearchDestinyEntitiesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Destiny2SearchDestinyEntitiesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
