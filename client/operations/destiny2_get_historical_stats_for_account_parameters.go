// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDestiny2GetHistoricalStatsForAccountParams creates a new Destiny2GetHistoricalStatsForAccountParams object
// with the default values initialized.
func NewDestiny2GetHistoricalStatsForAccountParams() *Destiny2GetHistoricalStatsForAccountParams {
	var ()
	return &Destiny2GetHistoricalStatsForAccountParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDestiny2GetHistoricalStatsForAccountParamsWithTimeout creates a new Destiny2GetHistoricalStatsForAccountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDestiny2GetHistoricalStatsForAccountParamsWithTimeout(timeout time.Duration) *Destiny2GetHistoricalStatsForAccountParams {
	var ()
	return &Destiny2GetHistoricalStatsForAccountParams{

		timeout: timeout,
	}
}

// NewDestiny2GetHistoricalStatsForAccountParamsWithContext creates a new Destiny2GetHistoricalStatsForAccountParams object
// with the default values initialized, and the ability to set a context for a request
func NewDestiny2GetHistoricalStatsForAccountParamsWithContext(ctx context.Context) *Destiny2GetHistoricalStatsForAccountParams {
	var ()
	return &Destiny2GetHistoricalStatsForAccountParams{

		Context: ctx,
	}
}

// NewDestiny2GetHistoricalStatsForAccountParamsWithHTTPClient creates a new Destiny2GetHistoricalStatsForAccountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDestiny2GetHistoricalStatsForAccountParamsWithHTTPClient(client *http.Client) *Destiny2GetHistoricalStatsForAccountParams {
	var ()
	return &Destiny2GetHistoricalStatsForAccountParams{
		HTTPClient: client,
	}
}

/*Destiny2GetHistoricalStatsForAccountParams contains all the parameters to send to the API endpoint
for the destiny2 get historical stats for account operation typically these are written to a http.Request
*/
type Destiny2GetHistoricalStatsForAccountParams struct {

	/*DestinyMembershipID
	  The Destiny membershipId of the user to retrieve.

	*/
	DestinyMembershipID int64
	/*Groups
	  Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals.

	*/
	Groups []int64
	/*MembershipType
	  A valid non-BungieNet membership type.

	*/
	MembershipType int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the destiny2 get historical stats for account params
func (o *Destiny2GetHistoricalStatsForAccountParams) WithTimeout(timeout time.Duration) *Destiny2GetHistoricalStatsForAccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the destiny2 get historical stats for account params
func (o *Destiny2GetHistoricalStatsForAccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the destiny2 get historical stats for account params
func (o *Destiny2GetHistoricalStatsForAccountParams) WithContext(ctx context.Context) *Destiny2GetHistoricalStatsForAccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the destiny2 get historical stats for account params
func (o *Destiny2GetHistoricalStatsForAccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the destiny2 get historical stats for account params
func (o *Destiny2GetHistoricalStatsForAccountParams) WithHTTPClient(client *http.Client) *Destiny2GetHistoricalStatsForAccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the destiny2 get historical stats for account params
func (o *Destiny2GetHistoricalStatsForAccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDestinyMembershipID adds the destinyMembershipID to the destiny2 get historical stats for account params
func (o *Destiny2GetHistoricalStatsForAccountParams) WithDestinyMembershipID(destinyMembershipID int64) *Destiny2GetHistoricalStatsForAccountParams {
	o.SetDestinyMembershipID(destinyMembershipID)
	return o
}

// SetDestinyMembershipID adds the destinyMembershipId to the destiny2 get historical stats for account params
func (o *Destiny2GetHistoricalStatsForAccountParams) SetDestinyMembershipID(destinyMembershipID int64) {
	o.DestinyMembershipID = destinyMembershipID
}

// WithGroups adds the groups to the destiny2 get historical stats for account params
func (o *Destiny2GetHistoricalStatsForAccountParams) WithGroups(groups []int64) *Destiny2GetHistoricalStatsForAccountParams {
	o.SetGroups(groups)
	return o
}

// SetGroups adds the groups to the destiny2 get historical stats for account params
func (o *Destiny2GetHistoricalStatsForAccountParams) SetGroups(groups []int64) {
	o.Groups = groups
}

// WithMembershipType adds the membershipType to the destiny2 get historical stats for account params
func (o *Destiny2GetHistoricalStatsForAccountParams) WithMembershipType(membershipType int32) *Destiny2GetHistoricalStatsForAccountParams {
	o.SetMembershipType(membershipType)
	return o
}

// SetMembershipType adds the membershipType to the destiny2 get historical stats for account params
func (o *Destiny2GetHistoricalStatsForAccountParams) SetMembershipType(membershipType int32) {
	o.MembershipType = membershipType
}

// WriteToRequest writes these params to a swagger request
func (o *Destiny2GetHistoricalStatsForAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param destinyMembershipId
	if err := r.SetPathParam("destinyMembershipId", swag.FormatInt64(o.DestinyMembershipID)); err != nil {
		return err
	}

	var valuesGroups []string
	for _, v := range o.Groups {
		valuesGroups = append(valuesGroups, swag.FormatInt64(v))
	}

	joinedGroups := swag.JoinByFormat(valuesGroups, "csv")
	// query array param groups
	if err := r.SetQueryParam("groups", joinedGroups...); err != nil {
		return err
	}

	// path param membershipType
	if err := r.SetPathParam("membershipType", swag.FormatInt32(o.MembershipType)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
