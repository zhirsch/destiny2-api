// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Destiny2ActivateTalentNode Activate a Talent Node. Chill out, everyone: we haven't decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
*/
func (a *Client) Destiny2ActivateTalentNode(params *Destiny2ActivateTalentNodeParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2ActivateTalentNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2ActivateTalentNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.ActivateTalentNode",
		Method:             "POST",
		PathPattern:        "/Destiny2/Actions/Items/ActivateTalentNode/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2ActivateTalentNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2ActivateTalentNodeOK), nil

}

/*
Destiny2GetActivityHistory Gets activity history stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
*/
func (a *Client) Destiny2GetActivityHistory(params *Destiny2GetActivityHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetActivityHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetActivityHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetActivityHistory",
		Method:             "GET",
		PathPattern:        "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/Activities/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetActivityHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetActivityHistoryOK), nil

}

/*
Destiny2GetClanAggregateStats Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
*/
func (a *Client) Destiny2GetClanAggregateStats(params *Destiny2GetClanAggregateStatsParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetClanAggregateStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetClanAggregateStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetClanAggregateStats",
		Method:             "GET",
		PathPattern:        "/Destiny2/Stats/AggregateClanStats/{groupId}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetClanAggregateStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetClanAggregateStatsOK), nil

}

/*
Destiny2GetClanLeaderboards Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
*/
func (a *Client) Destiny2GetClanLeaderboards(params *Destiny2GetClanLeaderboardsParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetClanLeaderboardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetClanLeaderboardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetClanLeaderboards",
		Method:             "GET",
		PathPattern:        "/Destiny2/Stats/Leaderboards/Clans/{groupId}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetClanLeaderboardsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetClanLeaderboardsOK), nil

}

/*
Destiny2GetDestinyAggregateActivityStats Gets all activities the character has participated in together with aggregate statistics for those activities. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
*/
func (a *Client) Destiny2GetDestinyAggregateActivityStats(params *Destiny2GetDestinyAggregateActivityStatsParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetDestinyAggregateActivityStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetDestinyAggregateActivityStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetDestinyAggregateActivityStats",
		Method:             "GET",
		PathPattern:        "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/AggregateActivityStats/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetDestinyAggregateActivityStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetDestinyAggregateActivityStatsOK), nil

}

/*
Destiny2GetHistoricalStats Gets historical stats for indicated character. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
*/
func (a *Client) Destiny2GetHistoricalStats(params *Destiny2GetHistoricalStatsParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetHistoricalStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetHistoricalStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetHistoricalStats",
		Method:             "GET",
		PathPattern:        "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetHistoricalStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetHistoricalStatsOK), nil

}

/*
Destiny2GetHistoricalStatsForAccount Gets aggregate historical stats organized around each character for a given account. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
*/
func (a *Client) Destiny2GetHistoricalStatsForAccount(params *Destiny2GetHistoricalStatsForAccountParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetHistoricalStatsForAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetHistoricalStatsForAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetHistoricalStatsForAccount",
		Method:             "GET",
		PathPattern:        "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetHistoricalStatsForAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetHistoricalStatsForAccountOK), nil

}

/*
Destiny2GetLeaderboards Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
*/
func (a *Client) Destiny2GetLeaderboards(params *Destiny2GetLeaderboardsParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetLeaderboardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetLeaderboardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetLeaderboards",
		Method:             "GET",
		PathPattern:        "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetLeaderboardsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetLeaderboardsOK), nil

}

/*
Destiny2GetLeaderboardsForCharacter Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
*/
func (a *Client) Destiny2GetLeaderboardsForCharacter(params *Destiny2GetLeaderboardsForCharacterParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetLeaderboardsForCharacterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetLeaderboardsForCharacterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetLeaderboardsForCharacter",
		Method:             "GET",
		PathPattern:        "/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetLeaderboardsForCharacterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetLeaderboardsForCharacterOK), nil

}

/*
Destiny2GetUniqueWeaponHistory Gets details about unique weapon usage, including all exotic weapons. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
*/
func (a *Client) Destiny2GetUniqueWeaponHistory(params *Destiny2GetUniqueWeaponHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetUniqueWeaponHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetUniqueWeaponHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetUniqueWeaponHistory",
		Method:             "GET",
		PathPattern:        "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/UniqueWeapons/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetUniqueWeaponHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetUniqueWeaponHistoryOK), nil

}

/*
Destiny2GetVendor Get the details of a specific Vendor. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
*/
func (a *Client) Destiny2GetVendor(params *Destiny2GetVendorParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetVendorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetVendorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetVendor",
		Method:             "GET",
		PathPattern:        "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/{vendorHash}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetVendorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetVendorOK), nil

}

/*
Destiny2GetVendors Get currently available vendors. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
*/
func (a *Client) Destiny2GetVendors(params *Destiny2GetVendorsParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetVendorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetVendorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetVendors",
		Method:             "GET",
		PathPattern:        "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetVendorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetVendorsOK), nil

}

/*
Destiny2InsertSocketPlug Insert a plug into a socketed item. I know how it sounds, but I assure you it's much more G-rated than you might be guessing. We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
*/
func (a *Client) Destiny2InsertSocketPlug(params *Destiny2InsertSocketPlugParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2InsertSocketPlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2InsertSocketPlugParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.InsertSocketPlug",
		Method:             "POST",
		PathPattern:        "/Destiny2/Actions/Items/InsertSocketPlug/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2InsertSocketPlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2InsertSocketPlugOK), nil

}

/*
Destiny2SearchDestinyEntities Gets a page list of Destiny items.
*/
func (a *Client) Destiny2SearchDestinyEntities(params *Destiny2SearchDestinyEntitiesParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2SearchDestinyEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2SearchDestinyEntitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.SearchDestinyEntities",
		Method:             "GET",
		PathPattern:        "/Destiny2/Armory/Search/{type}/{searchTerm}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2SearchDestinyEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2SearchDestinyEntitiesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
