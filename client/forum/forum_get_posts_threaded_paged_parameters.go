// Code generated by go-swagger; DO NOT EDIT.

package forum

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewForumGetPostsThreadedPagedParams creates a new ForumGetPostsThreadedPagedParams object
// with the default values initialized.
func NewForumGetPostsThreadedPagedParams() *ForumGetPostsThreadedPagedParams {
	var ()
	return &ForumGetPostsThreadedPagedParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewForumGetPostsThreadedPagedParamsWithTimeout creates a new ForumGetPostsThreadedPagedParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewForumGetPostsThreadedPagedParamsWithTimeout(timeout time.Duration) *ForumGetPostsThreadedPagedParams {
	var ()
	return &ForumGetPostsThreadedPagedParams{

		timeout: timeout,
	}
}

// NewForumGetPostsThreadedPagedParamsWithContext creates a new ForumGetPostsThreadedPagedParams object
// with the default values initialized, and the ability to set a context for a request
func NewForumGetPostsThreadedPagedParamsWithContext(ctx context.Context) *ForumGetPostsThreadedPagedParams {
	var ()
	return &ForumGetPostsThreadedPagedParams{

		Context: ctx,
	}
}

// NewForumGetPostsThreadedPagedParamsWithHTTPClient creates a new ForumGetPostsThreadedPagedParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewForumGetPostsThreadedPagedParamsWithHTTPClient(client *http.Client) *ForumGetPostsThreadedPagedParams {
	var ()
	return &ForumGetPostsThreadedPagedParams{
		HTTPClient: client,
	}
}

/*ForumGetPostsThreadedPagedParams contains all the parameters to send to the API endpoint
for the forum get posts threaded paged operation typically these are written to a http.Request
*/
type ForumGetPostsThreadedPagedParams struct {

	/*GetParentPost*/
	GetParentPost bool
	/*Page*/
	Page int32
	/*PageSize*/
	PageSize int32
	/*ParentPostID*/
	ParentPostID uint64
	/*ReplySize*/
	ReplySize int32
	/*RootThreadMode*/
	RootThreadMode bool
	/*Showbanned
	  If this value is not null or empty, banned posts are requested to be returned

	*/
	Showbanned *string
	/*SortMode*/
	SortMode int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) WithTimeout(timeout time.Duration) *ForumGetPostsThreadedPagedParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) WithContext(ctx context.Context) *ForumGetPostsThreadedPagedParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) WithHTTPClient(client *http.Client) *ForumGetPostsThreadedPagedParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGetParentPost adds the getParentPost to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) WithGetParentPost(getParentPost bool) *ForumGetPostsThreadedPagedParams {
	o.SetGetParentPost(getParentPost)
	return o
}

// SetGetParentPost adds the getParentPost to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) SetGetParentPost(getParentPost bool) {
	o.GetParentPost = getParentPost
}

// WithPage adds the page to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) WithPage(page int32) *ForumGetPostsThreadedPagedParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) SetPage(page int32) {
	o.Page = page
}

// WithPageSize adds the pageSize to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) WithPageSize(pageSize int32) *ForumGetPostsThreadedPagedParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) SetPageSize(pageSize int32) {
	o.PageSize = pageSize
}

// WithParentPostID adds the parentPostID to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) WithParentPostID(parentPostID uint64) *ForumGetPostsThreadedPagedParams {
	o.SetParentPostID(parentPostID)
	return o
}

// SetParentPostID adds the parentPostId to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) SetParentPostID(parentPostID uint64) {
	o.ParentPostID = parentPostID
}

// WithReplySize adds the replySize to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) WithReplySize(replySize int32) *ForumGetPostsThreadedPagedParams {
	o.SetReplySize(replySize)
	return o
}

// SetReplySize adds the replySize to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) SetReplySize(replySize int32) {
	o.ReplySize = replySize
}

// WithRootThreadMode adds the rootThreadMode to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) WithRootThreadMode(rootThreadMode bool) *ForumGetPostsThreadedPagedParams {
	o.SetRootThreadMode(rootThreadMode)
	return o
}

// SetRootThreadMode adds the rootThreadMode to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) SetRootThreadMode(rootThreadMode bool) {
	o.RootThreadMode = rootThreadMode
}

// WithShowbanned adds the showbanned to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) WithShowbanned(showbanned *string) *ForumGetPostsThreadedPagedParams {
	o.SetShowbanned(showbanned)
	return o
}

// SetShowbanned adds the showbanned to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) SetShowbanned(showbanned *string) {
	o.Showbanned = showbanned
}

// WithSortMode adds the sortMode to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) WithSortMode(sortMode int32) *ForumGetPostsThreadedPagedParams {
	o.SetSortMode(sortMode)
	return o
}

// SetSortMode adds the sortMode to the forum get posts threaded paged params
func (o *ForumGetPostsThreadedPagedParams) SetSortMode(sortMode int32) {
	o.SortMode = sortMode
}

// WriteToRequest writes these params to a swagger request
func (o *ForumGetPostsThreadedPagedParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param getParentPost
	if err := r.SetPathParam("getParentPost", swag.FormatBool(o.GetParentPost)); err != nil {
		return err
	}

	// path param page
	if err := r.SetPathParam("page", swag.FormatInt32(o.Page)); err != nil {
		return err
	}

	// path param pageSize
	if err := r.SetPathParam("pageSize", swag.FormatInt32(o.PageSize)); err != nil {
		return err
	}

	// path param parentPostId
	if err := r.SetPathParam("parentPostId", swag.FormatUint64(o.ParentPostID)); err != nil {
		return err
	}

	// path param replySize
	if err := r.SetPathParam("replySize", swag.FormatInt32(o.ReplySize)); err != nil {
		return err
	}

	// path param rootThreadMode
	if err := r.SetPathParam("rootThreadMode", swag.FormatBool(o.RootThreadMode)); err != nil {
		return err
	}

	if o.Showbanned != nil {

		// query param showbanned
		var qrShowbanned string
		if o.Showbanned != nil {
			qrShowbanned = *o.Showbanned
		}
		qShowbanned := qrShowbanned
		if qShowbanned != "" {
			if err := r.SetQueryParam("showbanned", qShowbanned); err != nil {
				return err
			}
		}

	}

	// path param sortMode
	if err := r.SetPathParam("sortMode", swag.FormatInt32(o.SortMode)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
