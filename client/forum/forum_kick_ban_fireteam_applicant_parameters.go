// Code generated by go-swagger; DO NOT EDIT.

package forum

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewForumKickBanFireteamApplicantParams creates a new ForumKickBanFireteamApplicantParams object
// with the default values initialized.
func NewForumKickBanFireteamApplicantParams() *ForumKickBanFireteamApplicantParams {
	var ()
	return &ForumKickBanFireteamApplicantParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewForumKickBanFireteamApplicantParamsWithTimeout creates a new ForumKickBanFireteamApplicantParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewForumKickBanFireteamApplicantParamsWithTimeout(timeout time.Duration) *ForumKickBanFireteamApplicantParams {
	var ()
	return &ForumKickBanFireteamApplicantParams{

		timeout: timeout,
	}
}

// NewForumKickBanFireteamApplicantParamsWithContext creates a new ForumKickBanFireteamApplicantParams object
// with the default values initialized, and the ability to set a context for a request
func NewForumKickBanFireteamApplicantParamsWithContext(ctx context.Context) *ForumKickBanFireteamApplicantParams {
	var ()
	return &ForumKickBanFireteamApplicantParams{

		Context: ctx,
	}
}

// NewForumKickBanFireteamApplicantParamsWithHTTPClient creates a new ForumKickBanFireteamApplicantParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewForumKickBanFireteamApplicantParamsWithHTTPClient(client *http.Client) *ForumKickBanFireteamApplicantParams {
	var ()
	return &ForumKickBanFireteamApplicantParams{
		HTTPClient: client,
	}
}

/*ForumKickBanFireteamApplicantParams contains all the parameters to send to the API endpoint
for the forum kick ban fireteam applicant operation typically these are written to a http.Request
*/
type ForumKickBanFireteamApplicantParams struct {

	/*TargetMembershipID
	  The id of the user you wish to kick.

	*/
	TargetMembershipID int64
	/*TopicID
	  The post id of the recruitment topic you wish to join.

	*/
	TopicID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the forum kick ban fireteam applicant params
func (o *ForumKickBanFireteamApplicantParams) WithTimeout(timeout time.Duration) *ForumKickBanFireteamApplicantParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the forum kick ban fireteam applicant params
func (o *ForumKickBanFireteamApplicantParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the forum kick ban fireteam applicant params
func (o *ForumKickBanFireteamApplicantParams) WithContext(ctx context.Context) *ForumKickBanFireteamApplicantParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the forum kick ban fireteam applicant params
func (o *ForumKickBanFireteamApplicantParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the forum kick ban fireteam applicant params
func (o *ForumKickBanFireteamApplicantParams) WithHTTPClient(client *http.Client) *ForumKickBanFireteamApplicantParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the forum kick ban fireteam applicant params
func (o *ForumKickBanFireteamApplicantParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTargetMembershipID adds the targetMembershipID to the forum kick ban fireteam applicant params
func (o *ForumKickBanFireteamApplicantParams) WithTargetMembershipID(targetMembershipID int64) *ForumKickBanFireteamApplicantParams {
	o.SetTargetMembershipID(targetMembershipID)
	return o
}

// SetTargetMembershipID adds the targetMembershipId to the forum kick ban fireteam applicant params
func (o *ForumKickBanFireteamApplicantParams) SetTargetMembershipID(targetMembershipID int64) {
	o.TargetMembershipID = targetMembershipID
}

// WithTopicID adds the topicID to the forum kick ban fireteam applicant params
func (o *ForumKickBanFireteamApplicantParams) WithTopicID(topicID int64) *ForumKickBanFireteamApplicantParams {
	o.SetTopicID(topicID)
	return o
}

// SetTopicID adds the topicId to the forum kick ban fireteam applicant params
func (o *ForumKickBanFireteamApplicantParams) SetTopicID(topicID int64) {
	o.TopicID = topicID
}

// WriteToRequest writes these params to a swagger request
func (o *ForumKickBanFireteamApplicantParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param targetMembershipId
	if err := r.SetPathParam("targetMembershipId", swag.FormatInt64(o.TargetMembershipID)); err != nil {
		return err
	}

	// path param topicId
	if err := r.SetPathParam("topicId", swag.FormatInt64(o.TopicID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
