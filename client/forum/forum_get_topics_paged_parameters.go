// Code generated by go-swagger; DO NOT EDIT.

package forum

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewForumGetTopicsPagedParams creates a new ForumGetTopicsPagedParams object
// with the default values initialized.
func NewForumGetTopicsPagedParams() *ForumGetTopicsPagedParams {
	var ()
	return &ForumGetTopicsPagedParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewForumGetTopicsPagedParamsWithTimeout creates a new ForumGetTopicsPagedParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewForumGetTopicsPagedParamsWithTimeout(timeout time.Duration) *ForumGetTopicsPagedParams {
	var ()
	return &ForumGetTopicsPagedParams{

		timeout: timeout,
	}
}

// NewForumGetTopicsPagedParamsWithContext creates a new ForumGetTopicsPagedParams object
// with the default values initialized, and the ability to set a context for a request
func NewForumGetTopicsPagedParamsWithContext(ctx context.Context) *ForumGetTopicsPagedParams {
	var ()
	return &ForumGetTopicsPagedParams{

		Context: ctx,
	}
}

// NewForumGetTopicsPagedParamsWithHTTPClient creates a new ForumGetTopicsPagedParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewForumGetTopicsPagedParamsWithHTTPClient(client *http.Client) *ForumGetTopicsPagedParams {
	var ()
	return &ForumGetTopicsPagedParams{
		HTTPClient: client,
	}
}

/*ForumGetTopicsPagedParams contains all the parameters to send to the API endpoint
for the forum get topics paged operation typically these are written to a http.Request
*/
type ForumGetTopicsPagedParams struct {

	/*CategoryFilter
	  A category filter

	*/
	CategoryFilter int32
	/*Group
	  The group, if any.

	*/
	Group int64
	/*Locales
	  Comma seperated list of locales posts must match to return in the result list. Default 'en'

	*/
	Locales *string
	/*Page
	  Zero paged page number

	*/
	Page int32
	/*PageSize
	  Unused

	*/
	PageSize int32
	/*QuickDate
	  A date filter.

	*/
	QuickDate int32
	/*Sort
	  The sort mode.

	*/
	Sort strfmt.Base64
	/*Tagstring
	  The tags to search, if any.

	*/
	Tagstring *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) WithTimeout(timeout time.Duration) *ForumGetTopicsPagedParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) WithContext(ctx context.Context) *ForumGetTopicsPagedParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) WithHTTPClient(client *http.Client) *ForumGetTopicsPagedParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategoryFilter adds the categoryFilter to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) WithCategoryFilter(categoryFilter int32) *ForumGetTopicsPagedParams {
	o.SetCategoryFilter(categoryFilter)
	return o
}

// SetCategoryFilter adds the categoryFilter to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) SetCategoryFilter(categoryFilter int32) {
	o.CategoryFilter = categoryFilter
}

// WithGroup adds the group to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) WithGroup(group int64) *ForumGetTopicsPagedParams {
	o.SetGroup(group)
	return o
}

// SetGroup adds the group to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) SetGroup(group int64) {
	o.Group = group
}

// WithLocales adds the locales to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) WithLocales(locales *string) *ForumGetTopicsPagedParams {
	o.SetLocales(locales)
	return o
}

// SetLocales adds the locales to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) SetLocales(locales *string) {
	o.Locales = locales
}

// WithPage adds the page to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) WithPage(page int32) *ForumGetTopicsPagedParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) SetPage(page int32) {
	o.Page = page
}

// WithPageSize adds the pageSize to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) WithPageSize(pageSize int32) *ForumGetTopicsPagedParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) SetPageSize(pageSize int32) {
	o.PageSize = pageSize
}

// WithQuickDate adds the quickDate to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) WithQuickDate(quickDate int32) *ForumGetTopicsPagedParams {
	o.SetQuickDate(quickDate)
	return o
}

// SetQuickDate adds the quickDate to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) SetQuickDate(quickDate int32) {
	o.QuickDate = quickDate
}

// WithSort adds the sort to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) WithSort(sort strfmt.Base64) *ForumGetTopicsPagedParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) SetSort(sort strfmt.Base64) {
	o.Sort = sort
}

// WithTagstring adds the tagstring to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) WithTagstring(tagstring *string) *ForumGetTopicsPagedParams {
	o.SetTagstring(tagstring)
	return o
}

// SetTagstring adds the tagstring to the forum get topics paged params
func (o *ForumGetTopicsPagedParams) SetTagstring(tagstring *string) {
	o.Tagstring = tagstring
}

// WriteToRequest writes these params to a swagger request
func (o *ForumGetTopicsPagedParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param categoryFilter
	if err := r.SetPathParam("categoryFilter", swag.FormatInt32(o.CategoryFilter)); err != nil {
		return err
	}

	// path param group
	if err := r.SetPathParam("group", swag.FormatInt64(o.Group)); err != nil {
		return err
	}

	if o.Locales != nil {

		// query param locales
		var qrLocales string
		if o.Locales != nil {
			qrLocales = *o.Locales
		}
		qLocales := qrLocales
		if qLocales != "" {
			if err := r.SetQueryParam("locales", qLocales); err != nil {
				return err
			}
		}

	}

	// path param page
	if err := r.SetPathParam("page", swag.FormatInt32(o.Page)); err != nil {
		return err
	}

	// path param pageSize
	if err := r.SetPathParam("pageSize", swag.FormatInt32(o.PageSize)); err != nil {
		return err
	}

	// path param quickDate
	if err := r.SetPathParam("quickDate", swag.FormatInt32(o.QuickDate)); err != nil {
		return err
	}

	// path param sort
	if err := r.SetPathParam("sort", o.Sort.String()); err != nil {
		return err
	}

	if o.Tagstring != nil {

		// query param tagstring
		var qrTagstring string
		if o.Tagstring != nil {
			qrTagstring = *o.Tagstring
		}
		qTagstring := qrTagstring
		if qTagstring != "" {
			if err := r.SetQueryParam("tagstring", qTagstring); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
