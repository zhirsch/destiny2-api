// Code generated by go-swagger; DO NOT EDIT.

package destiny2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new destiny2 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for destiny2 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Destiny2EquipItem Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
*/
func (a *Client) Destiny2EquipItem(params *Destiny2EquipItemParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2EquipItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2EquipItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.EquipItem",
		Method:             "POST",
		PathPattern:        "/Destiny2/Actions/Items/EquipItem/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2EquipItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2EquipItemOK), nil

}

/*
Destiny2EquipItems Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
*/
func (a *Client) Destiny2EquipItems(params *Destiny2EquipItemsParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2EquipItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2EquipItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.EquipItems",
		Method:             "POST",
		PathPattern:        "/Destiny2/Actions/Items/EquipItems/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2EquipItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2EquipItemsOK), nil

}

/*
Destiny2GetCharacter Returns character information for the supplied character.
*/
func (a *Client) Destiny2GetCharacter(params *Destiny2GetCharacterParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetCharacterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetCharacterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetCharacter",
		Method:             "GET",
		PathPattern:        "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetCharacterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetCharacterOK), nil

}

/*
Destiny2GetClanWeeklyRewardState Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
*/
func (a *Client) Destiny2GetClanWeeklyRewardState(params *Destiny2GetClanWeeklyRewardStateParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetClanWeeklyRewardStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetClanWeeklyRewardStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetClanWeeklyRewardState",
		Method:             "GET",
		PathPattern:        "/Destiny2/Clan/{groupId}/WeeklyRewardState/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetClanWeeklyRewardStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetClanWeeklyRewardStateOK), nil

}

/*
Destiny2GetDestinyEntityDefinition Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don't use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
*/
func (a *Client) Destiny2GetDestinyEntityDefinition(params *Destiny2GetDestinyEntityDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetDestinyEntityDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetDestinyEntityDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetDestinyEntityDefinition",
		Method:             "GET",
		PathPattern:        "/Destiny2/Manifest/{entityType}/{hashIdentifier}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetDestinyEntityDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetDestinyEntityDefinitionOK), nil

}

/*
Destiny2GetDestinyManifest Returns the current version of the manifest as a json object.
*/
func (a *Client) Destiny2GetDestinyManifest(params *Destiny2GetDestinyManifestParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetDestinyManifestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetDestinyManifestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetDestinyManifest",
		Method:             "GET",
		PathPattern:        "/Destiny2/Manifest/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetDestinyManifestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetDestinyManifestOK), nil

}

/*
Destiny2GetHistoricalStatsDefinition Gets historical stats definitions.
*/
func (a *Client) Destiny2GetHistoricalStatsDefinition(params *Destiny2GetHistoricalStatsDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetHistoricalStatsDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetHistoricalStatsDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetHistoricalStatsDefinition",
		Method:             "GET",
		PathPattern:        "/Destiny2/Stats/Definition/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetHistoricalStatsDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetHistoricalStatsDefinitionOK), nil

}

/*
Destiny2GetItem Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
*/
func (a *Client) Destiny2GetItem(params *Destiny2GetItemParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetItem",
		Method:             "GET",
		PathPattern:        "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Item/{itemInstanceId}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetItemOK), nil

}

/*
Destiny2GetPostGameCarnageReport Gets the available post game carnage report for the activity ID.
*/
func (a *Client) Destiny2GetPostGameCarnageReport(params *Destiny2GetPostGameCarnageReportParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetPostGameCarnageReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetPostGameCarnageReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetPostGameCarnageReport",
		Method:             "GET",
		PathPattern:        "/Destiny2/Stats/PostGameCarnageReport/{activityId}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetPostGameCarnageReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetPostGameCarnageReportOK), nil

}

/*
Destiny2GetProfile Returns Destiny Profile information for the supplied membership.
*/
func (a *Client) Destiny2GetProfile(params *Destiny2GetProfileParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetProfile",
		Method:             "GET",
		PathPattern:        "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetProfileOK), nil

}

/*
Destiny2GetPublicMilestoneContent Gets custom localized content for the milestone of the given hash, if it exists.
*/
func (a *Client) Destiny2GetPublicMilestoneContent(params *Destiny2GetPublicMilestoneContentParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetPublicMilestoneContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetPublicMilestoneContentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetPublicMilestoneContent",
		Method:             "GET",
		PathPattern:        "/Destiny2/Milestones/{milestoneHash}/Content/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetPublicMilestoneContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetPublicMilestoneContentOK), nil

}

/*
Destiny2GetPublicMilestones Gets public information about currently available Milestones.
*/
func (a *Client) Destiny2GetPublicMilestones(params *Destiny2GetPublicMilestonesParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2GetPublicMilestonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2GetPublicMilestonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.GetPublicMilestones",
		Method:             "GET",
		PathPattern:        "/Destiny2/Milestones/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2GetPublicMilestonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2GetPublicMilestonesOK), nil

}

/*
Destiny2SearchDestinyPlayer Returns a list of Destiny memberships given a full Gamertag or PSN ID.
*/
func (a *Client) Destiny2SearchDestinyPlayer(params *Destiny2SearchDestinyPlayerParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2SearchDestinyPlayerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2SearchDestinyPlayerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.SearchDestinyPlayer",
		Method:             "GET",
		PathPattern:        "/Destiny2/SearchDestinyPlayer/{membershipType}/{displayName}/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2SearchDestinyPlayerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2SearchDestinyPlayerOK), nil

}

/*
Destiny2SetItemLockState Set the Lock State for an instanced item. You must have a valid Destiny Account.
*/
func (a *Client) Destiny2SetItemLockState(params *Destiny2SetItemLockStateParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2SetItemLockStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2SetItemLockStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.SetItemLockState",
		Method:             "POST",
		PathPattern:        "/Destiny2/Actions/Items/SetLockState/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2SetItemLockStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2SetItemLockStateOK), nil

}

/*
Destiny2TransferItem Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it's an instanced item. itshappening.gif
*/
func (a *Client) Destiny2TransferItem(params *Destiny2TransferItemParams, authInfo runtime.ClientAuthInfoWriter) (*Destiny2TransferItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestiny2TransferItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Destiny2.TransferItem",
		Method:             "POST",
		PathPattern:        "/Destiny2/Actions/Items/TransferItem/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Destiny2TransferItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Destiny2TransferItemOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
