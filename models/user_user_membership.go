// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// UserUserMembership Very basic info about a user as returned by the Account server.
// swagger:model User.UserMembership

type UserUserMembership struct {

	// Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
	DisplayName string `json:"displayName,omitempty"`

	// Membership ID as they user is known in the Accounts service
	MembershipID int64 `json:"membershipId,omitempty"`

	// Type of the membership.
	MembershipType BungieMembershipType `json:"membershipType,omitempty"`
}

/* polymorph User.UserMembership displayName false */

/* polymorph User.UserMembership membershipId false */

/* polymorph User.UserMembership membershipType false */

// Validate validates this user user membership
func (m *UserUserMembership) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMembershipType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserUserMembership) validateMembershipType(formats strfmt.Registry) error {

	if swag.IsZero(m.MembershipType) { // not required
		return nil
	}

	if err := m.MembershipType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("membershipType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserUserMembership) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserUserMembership) UnmarshalBinary(b []byte) error {
	var res UserUserMembership
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
