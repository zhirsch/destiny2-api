// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyEquippingBlockDefinition Items that can be equipped define this block. It contains information we need to understand how and when the item can be equipped.
// swagger:model Destiny.Definitions.DestinyEquippingBlockDefinition

type DestinyDefinitionsDestinyEquippingBlockDefinition struct {

	// These are custom attributes on the equippability of the item.
	// For now, this can only be "equip on acquire", which would mean that the item will be automatically equipped as soon as you pick it up.
	Attributes DestinyEquippingItemBlockAttributes `json:"attributes,omitempty"`

	// These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions.
	DisplayStrings []string `json:"displayStrings"`

	// An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped.
	EquipmentSlotTypeHash uint32 `json:"equipmentSlotTypeHash,omitempty"`

	// If the item is part of a gearset, this is a reference to that gearset item.
	GearsetItemHash uint32 `json:"gearsetItemHash,omitempty"`

	// If defined, this is the label used to check if the item has other items of matching types already equipped.
	// For instance, when you aren't allowed to equip more than one Exotic Weapon, that's because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item's uniqueLabel vs. all other already equipped items (other than the item in the slot that's about to be occupied).
	UniqueLabel string `json:"uniqueLabel,omitempty"`

	// The hash of that unique label. Does not point to a specific definition.
	UniqueLabelHash uint32 `json:"uniqueLabelHash,omitempty"`
}

/* polymorph Destiny.Definitions.DestinyEquippingBlockDefinition attributes false */

/* polymorph Destiny.Definitions.DestinyEquippingBlockDefinition displayStrings false */

/* polymorph Destiny.Definitions.DestinyEquippingBlockDefinition equipmentSlotTypeHash false */

/* polymorph Destiny.Definitions.DestinyEquippingBlockDefinition gearsetItemHash false */

/* polymorph Destiny.Definitions.DestinyEquippingBlockDefinition uniqueLabel false */

/* polymorph Destiny.Definitions.DestinyEquippingBlockDefinition uniqueLabelHash false */

// Validate validates this destiny definitions destiny equipping block definition
func (m *DestinyDefinitionsDestinyEquippingBlockDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayStrings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsDestinyEquippingBlockDefinition) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if err := m.Attributes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes")
		}
		return err
	}

	return nil
}

func (m *DestinyDefinitionsDestinyEquippingBlockDefinition) validateDisplayStrings(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayStrings) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyEquippingBlockDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyEquippingBlockDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyEquippingBlockDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
