// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyUnlockExpressionDefinition Where the sausage gets made. Unlock Expressions are the foundation of the game's gating mechanics and investment-related restrictions. They can test Unlock Flags and Unlock Values for certain states, using a sufficient amount of logical operators such that unlock expressions are effectively Turing complete.
// Use UnlockExpressionParser to evaluate expressions using an IUnlockContext parsed from Babel.
// swagger:model Destiny.Definitions.DestinyUnlockExpressionDefinition

type DestinyDefinitionsDestinyUnlockExpressionDefinition struct {

	// A shortcut for determining the most restrictive gating that this expression performs. See the DestinyGatingScope enum's documentation for more details.
	Scope DestinyDestinyGatingScope `json:"scope,omitempty"`
}

/* polymorph Destiny.Definitions.DestinyUnlockExpressionDefinition scope false */

// Validate validates this destiny definitions destiny unlock expression definition
func (m *DestinyDefinitionsDestinyUnlockExpressionDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScope(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsDestinyUnlockExpressionDefinition) validateScope(formats strfmt.Registry) error {

	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if err := m.Scope.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scope")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyUnlockExpressionDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyUnlockExpressionDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyUnlockExpressionDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
