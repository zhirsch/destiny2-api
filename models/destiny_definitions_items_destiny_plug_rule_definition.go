// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsItemsDestinyPlugRuleDefinition Dictates a rule around whether the plug is enabled or insertable.
// In practice, the live Destiny data will refer to these entries by index. You can then look up that index in the appropriate property (enabledRules or insertionRules) to get the localized string for the failure message if it failed.
// swagger:model Destiny.Definitions.Items.DestinyPlugRuleDefinition

type DestinyDefinitionsItemsDestinyPlugRuleDefinition struct {

	// The localized string to show if this rule fails.
	FailureMessage string `json:"failureMessage,omitempty"`
}

/* polymorph Destiny.Definitions.Items.DestinyPlugRuleDefinition failureMessage false */

// Validate validates this destiny definitions items destiny plug rule definition
func (m *DestinyDefinitionsItemsDestinyPlugRuleDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsItemsDestinyPlugRuleDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsItemsDestinyPlugRuleDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsItemsDestinyPlugRuleDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
