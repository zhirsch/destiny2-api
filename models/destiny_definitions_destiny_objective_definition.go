// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyObjectiveDefinition Defines an "Objective".
// An objective is a specific task you should accomplish in the game. These are referred to by:
// - Quest Steps (which are DestinyInventoryItemDefinition entities with Objectives)
// - Challenges (which are Objectives defined on an DestinyActivityDefintion)
// - Milestones (which refer to Objectives that are defined on both Quest Steps and Activities)
// - Anything else that the designers decide to do later.
// Objectives have progress, a notion of having been Completed, human readable data describing the task to be accomplished, and a lot of optional tack-on data that can enhance the information provided about the task.
// swagger:model Destiny.Definitions.DestinyObjectiveDefinition

type DestinyDefinitionsDestinyObjectiveDefinition struct {

	// If true, the value is allowed to go negative.
	AllowNegativeValue bool `json:"allowNegativeValue,omitempty"`

	// If true, you can effectively "un-complete" this objective if you lose progress after crossing the completion threshold.
	// If False, once you complete the task it will remain completed forever by locking the value.
	AllowValueChangeWhenCompleted bool `json:"allowValueChangeWhenCompleted,omitempty"`

	// The value that the unlock value defined in unlockValueHash must reach in order for the objective to be considered Completed. Used in calculating progress and completion status.
	CompletionValue int32 `json:"completionValue,omitempty"`

	// Ideally, this should tell you what your task is. I'm not going to lie to you though. Sometimes this doesn't have useful information at all. Which sucks, but there's nothing either of us can do about it.
	DisplayProperties *DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition `json:"displayProperties,omitempty"`

	// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
	// When entities refer to each other in Destiny content, it is this hash that they are referring to.
	Hash uint32 `json:"hash,omitempty"`

	// The index of the entity as it was found in the investment tables.
	Index int32 `json:"index,omitempty"`

	// If true, completion means having an unlock value less than or equal to the completionValue.
	// If False, completion means having an unlock value greater than or equal to the completionValue.
	IsCountingDownward bool `json:"isCountingDownward,omitempty"`

	// OPTIONAL: a hash identifier for the location at which this objective must be accomplished, if there is a location defined. Look up the DestinyLocationDefinition for this hash for that additional location info.
	LocationHash uint32 `json:"locationHash,omitempty"`

	// If this objective enables Perks intrinsically, the conditions for that enabling are defined here.
	Perks *DestinyDefinitionsDestinyObjectivePerkEntryDefinition `json:"perks,omitempty"`

	// Text to describe the progress bar.
	ProgressDescription string `json:"progressDescription,omitempty"`

	// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
	Redacted bool `json:"redacted,omitempty"`

	// If this objective enables modifications on a player's stats intrinsically, the conditions are defined here.
	Stats *DestinyDefinitionsDestinyObjectiveStatEntryDefinition `json:"stats,omitempty"`

	// The UI style applied to the objective. It's an enum, take a look at DestinyUnlockValueUIStyle for details of the possible styles. Use this info as you wish to customize your UI.
	ValueStyle DestinyDestinyUnlockValueUIStyle `json:"valueStyle,omitempty"`
}

/* polymorph Destiny.Definitions.DestinyObjectiveDefinition allowNegativeValue false */

/* polymorph Destiny.Definitions.DestinyObjectiveDefinition allowValueChangeWhenCompleted false */

/* polymorph Destiny.Definitions.DestinyObjectiveDefinition completionValue false */

/* polymorph Destiny.Definitions.DestinyObjectiveDefinition displayProperties false */

/* polymorph Destiny.Definitions.DestinyObjectiveDefinition hash false */

/* polymorph Destiny.Definitions.DestinyObjectiveDefinition index false */

/* polymorph Destiny.Definitions.DestinyObjectiveDefinition isCountingDownward false */

/* polymorph Destiny.Definitions.DestinyObjectiveDefinition locationHash false */

/* polymorph Destiny.Definitions.DestinyObjectiveDefinition perks false */

/* polymorph Destiny.Definitions.DestinyObjectiveDefinition progressDescription false */

/* polymorph Destiny.Definitions.DestinyObjectiveDefinition redacted false */

/* polymorph Destiny.Definitions.DestinyObjectiveDefinition stats false */

/* polymorph Destiny.Definitions.DestinyObjectiveDefinition valueStyle false */

// Validate validates this destiny definitions destiny objective definition
func (m *DestinyDefinitionsDestinyObjectiveDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePerks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateValueStyle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsDestinyObjectiveDefinition) validateDisplayProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayProperties) { // not required
		return nil
	}

	if m.DisplayProperties != nil {

		if err := m.DisplayProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("displayProperties")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyObjectiveDefinition) validatePerks(formats strfmt.Registry) error {

	if swag.IsZero(m.Perks) { // not required
		return nil
	}

	if m.Perks != nil {

		if err := m.Perks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perks")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyObjectiveDefinition) validateStats(formats strfmt.Registry) error {

	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {

		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyObjectiveDefinition) validateValueStyle(formats strfmt.Registry) error {

	if swag.IsZero(m.ValueStyle) { // not required
		return nil
	}

	if err := m.ValueStyle.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("valueStyle")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyObjectiveDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyObjectiveDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyObjectiveDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
