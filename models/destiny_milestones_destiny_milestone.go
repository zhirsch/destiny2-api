// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyMilestonesDestinyMilestone Represents a runtime instance of a user's milestone status. Live Milestone data should be combined with DestinyMilestoneDefinition data to show the user a picture of what is available for them to do in the game, and their status in regards to said "things to do." Consider it a big, wonky to-do list, or Advisors 3.0 for those who remember the Destiny 1 API.
// swagger:model Destiny.Milestones.DestinyMilestone

type DestinyMilestonesDestinyMilestone struct {

	// available quests
	AvailableQuests DestinyMilestonesDestinyMilestoneAvailableQuests `json:"availableQuests"`

	// If known, this is the date when the event will next end or repeat. It will only be populated for events with fixed and repeating start and end dates.
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// The unique identifier for the Milestone. Use it to look up the DestinyMilestoneDefinition, so you can combine the other data in this contract with static definition data.
	MilestoneHash uint32 `json:"milestoneHash,omitempty"`

	// rewards
	Rewards DestinyMilestonesDestinyMilestoneRewards `json:"rewards"`

	// If known, this is the date when the event last began or refreshed. It will only be populated for events with fixed and repeating start and end dates.
	StartDate strfmt.DateTime `json:"startDate,omitempty"`

	// Milestones may have arbitrary key/value pairs associated with them, for data that users will want to know about but that doesn't fit neatly into any of the common components such as Quests. A good example of this would be - if this existed in Destiny 1 - the number of wins you currently have on your Trials of Osiris ticket. Looking in the DestinyMilestoneDefinition, you can use the string identifier of this dictionary to look up more info about the value, including localized string content for displaying the value. The value in the dictionary is the floating point number. The definition will tell you how to format this number.
	Values map[string]float32 `json:"values,omitempty"`

	// A milestone may have one or more active vendors that are "related" to it (that provide rewards, or that are the initiators of the Milestone). I already regret this, even as I'm typing it. You see, sometimes a milestone may be directly correlated with a set of vendors that provide varying tiers of rewards. The player may not be able to interact with one or more of those vendors. This will return the hashes of the Vendors that the player *can* interact with, allowing you to show their current inventory as rewards or related items to the Milestone or its activities.
	VendorHashes []uint32 `json:"vendorHashes"`
}

/* polymorph Destiny.Milestones.DestinyMilestone availableQuests false */

/* polymorph Destiny.Milestones.DestinyMilestone endDate false */

/* polymorph Destiny.Milestones.DestinyMilestone milestoneHash false */

/* polymorph Destiny.Milestones.DestinyMilestone rewards false */

/* polymorph Destiny.Milestones.DestinyMilestone startDate false */

/* polymorph Destiny.Milestones.DestinyMilestone values false */

/* polymorph Destiny.Milestones.DestinyMilestone vendorHashes false */

// Validate validates this destiny milestones destiny milestone
func (m *DestinyMilestonesDestinyMilestone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVendorHashes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyMilestonesDestinyMilestone) validateVendorHashes(formats strfmt.Registry) error {

	if swag.IsZero(m.VendorHashes) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyMilestonesDestinyMilestone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyMilestonesDestinyMilestone) UnmarshalBinary(b []byte) error {
	var res DestinyMilestonesDestinyMilestone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
