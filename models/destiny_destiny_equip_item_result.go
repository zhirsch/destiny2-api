// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDestinyEquipItemResult The results of an Equipping operation performed through the Destiny API.
// swagger:model Destiny.DestinyEquipItemResult

type DestinyDestinyEquipItemResult struct {

	// A PlatformErrorCodes enum indicating whether it succeeded, and if it failed why.
	EquipStatus ExceptionsPlatformErrorCodes `json:"equipStatus,omitempty"`

	// The instance ID of the item in question (all items that can be equipped must, but definition, be Instanced and thus have an Instance ID that you can use to refer to them)
	ItemInstanceID int64 `json:"itemInstanceId,omitempty"`
}

/* polymorph Destiny.DestinyEquipItemResult equipStatus false */

/* polymorph Destiny.DestinyEquipItemResult itemInstanceId false */

// Validate validates this destiny destiny equip item result
func (m *DestinyDestinyEquipItemResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEquipStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDestinyEquipItemResult) validateEquipStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.EquipStatus) { // not required
		return nil
	}

	if err := m.EquipStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("equipStatus")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDestinyEquipItemResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDestinyEquipItemResult) UnmarshalBinary(b []byte) error {
	var res DestinyDestinyEquipItemResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
