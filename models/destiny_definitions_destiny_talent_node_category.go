// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyTalentNodeCategory An artificial construct provided by Bungie.Net, where we attempt to group talent nodes by functionality.
// This is a single set of references to Talent Nodes that share a common trait or purpose.
// swagger:model Destiny.Definitions.DestinyTalentNodeCategory

type DestinyDefinitionsDestinyTalentNodeCategory struct {

	// Will contain at least the "name", which will be the title of the category. We will likely not have description and an icon yet, but I'm going to keep my options open.
	DisplayProperties *DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition `json:"displayProperties,omitempty"`

	// Mostly just for debug purposes, but if you find it useful you can have it. This is BNet's manually created identifier for this category.
	Identifier string `json:"identifier,omitempty"`

	// If true, we found the localized content in a related DestinyLoreDefinition instead of local BNet localization files. This is mostly for ease of my own future investigations.
	IsLoreDriven bool `json:"isLoreDriven,omitempty"`

	// The set of all hash identifiers for Talent Nodes (DestinyTalentNodeDefinition) in this Talent Grid that are part of this Category.
	NodeHashes []uint32 `json:"nodeHashes"`
}

/* polymorph Destiny.Definitions.DestinyTalentNodeCategory displayProperties false */

/* polymorph Destiny.Definitions.DestinyTalentNodeCategory identifier false */

/* polymorph Destiny.Definitions.DestinyTalentNodeCategory isLoreDriven false */

/* polymorph Destiny.Definitions.DestinyTalentNodeCategory nodeHashes false */

// Validate validates this destiny definitions destiny talent node category
func (m *DestinyDefinitionsDestinyTalentNodeCategory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNodeHashes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsDestinyTalentNodeCategory) validateDisplayProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayProperties) { // not required
		return nil
	}

	if m.DisplayProperties != nil {

		if err := m.DisplayProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("displayProperties")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyTalentNodeCategory) validateNodeHashes(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeHashes) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyTalentNodeCategory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyTalentNodeCategory) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyTalentNodeCategory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
