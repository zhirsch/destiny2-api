// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsSocketsDestinySocketTypeDefinition All Sockets have a "Type": a set of common properties that determine when the socket allows Plugs to be inserted, what Categories of Plugs can be inserted, and whether the socket is even visible at all given the current game/character/account state.
// See DestinyInventoryItemDefinition for more information about Socketed items and Plugs.
// swagger:model Destiny.Definitions.Sockets.DestinySocketTypeDefinition

type DestinyDefinitionsSocketsDestinySocketTypeDefinition struct {

	// There are fields for this display data, but they appear to be unpopulated as of now. I am not sure where in the UI these would show if they even were populated, but I will continue to return this data in case it becomes useful.
	DisplayProperties *DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition `json:"displayProperties,omitempty"`

	// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
	// When entities refer to each other in Destiny content, it is this hash that they are referring to.
	Hash uint32 `json:"hash,omitempty"`

	// The index of the entity as it was found in the investment tables.
	Index int32 `json:"index,omitempty"`

	// Defines what happens when a plug is inserted into sockets of this type.
	InsertAction *DestinyDefinitionsSocketsDestinyInsertPlugActionDefinition `json:"insertAction,omitempty"`

	// plug whitelist
	PlugWhitelist DestinyDefinitionsSocketsDestinySocketTypeDefinitionPlugWhitelist `json:"plugWhitelist"`

	// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
	Redacted bool `json:"redacted,omitempty"`

	// socket category hash
	SocketCategoryHash uint32 `json:"socketCategoryHash,omitempty"`

	// visibility
	Visibility DestinyDestinySocketVisibility `json:"visibility,omitempty"`
}

/* polymorph Destiny.Definitions.Sockets.DestinySocketTypeDefinition displayProperties false */

/* polymorph Destiny.Definitions.Sockets.DestinySocketTypeDefinition hash false */

/* polymorph Destiny.Definitions.Sockets.DestinySocketTypeDefinition index false */

/* polymorph Destiny.Definitions.Sockets.DestinySocketTypeDefinition insertAction false */

/* polymorph Destiny.Definitions.Sockets.DestinySocketTypeDefinition plugWhitelist false */

/* polymorph Destiny.Definitions.Sockets.DestinySocketTypeDefinition redacted false */

/* polymorph Destiny.Definitions.Sockets.DestinySocketTypeDefinition socketCategoryHash false */

/* polymorph Destiny.Definitions.Sockets.DestinySocketTypeDefinition visibility false */

// Validate validates this destiny definitions sockets destiny socket type definition
func (m *DestinyDefinitionsSocketsDestinySocketTypeDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInsertAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsSocketsDestinySocketTypeDefinition) validateDisplayProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayProperties) { // not required
		return nil
	}

	if m.DisplayProperties != nil {

		if err := m.DisplayProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("displayProperties")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsSocketsDestinySocketTypeDefinition) validateInsertAction(formats strfmt.Registry) error {

	if swag.IsZero(m.InsertAction) { // not required
		return nil
	}

	if m.InsertAction != nil {

		if err := m.InsertAction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("insertAction")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsSocketsDestinySocketTypeDefinition) validateVisibility(formats strfmt.Registry) error {

	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	if err := m.Visibility.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("visibility")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsSocketsDestinySocketTypeDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsSocketsDestinySocketTypeDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsSocketsDestinySocketTypeDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
