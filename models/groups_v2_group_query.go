// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GroupsV2GroupQuery groups v2 group query
// swagger:model GroupsV2.GroupQuery

type GroupsV2GroupQuery struct {

	// creation date
	CreationDate GroupsV2GroupDateRange `json:"creationDate,omitempty"`

	// current page
	CurrentPage int32 `json:"currentPage,omitempty"`

	// group member count filter
	GroupMemberCountFilter int32 `json:"groupMemberCountFilter,omitempty"`

	// group type
	GroupType GroupsV2GroupType `json:"groupType,omitempty"`

	// items per page
	ItemsPerPage int32 `json:"itemsPerPage,omitempty"`

	// locale filter
	LocaleFilter string `json:"localeFilter,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// request continuation token
	RequestContinuationToken string `json:"requestContinuationToken,omitempty"`

	// sort by
	SortBy GroupsV2GroupSortBy `json:"sortBy,omitempty"`

	// tag text
	TagText string `json:"tagText,omitempty"`
}

/* polymorph GroupsV2.GroupQuery creationDate false */

/* polymorph GroupsV2.GroupQuery currentPage false */

/* polymorph GroupsV2.GroupQuery groupMemberCountFilter false */

/* polymorph GroupsV2.GroupQuery groupType false */

/* polymorph GroupsV2.GroupQuery itemsPerPage false */

/* polymorph GroupsV2.GroupQuery localeFilter false */

/* polymorph GroupsV2.GroupQuery name false */

/* polymorph GroupsV2.GroupQuery requestContinuationToken false */

/* polymorph GroupsV2.GroupQuery sortBy false */

/* polymorph GroupsV2.GroupQuery tagText false */

// Validate validates this groups v2 group query
func (m *GroupsV2GroupQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupMemberCountFilter(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSortBy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupsV2GroupQuery) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := m.CreationDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("creationDate")
		}
		return err
	}

	return nil
}

var groupsV2GroupQueryTypeGroupMemberCountFilterPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		groupsV2GroupQueryTypeGroupMemberCountFilterPropEnum = append(groupsV2GroupQueryTypeGroupMemberCountFilterPropEnum, v)
	}
}

// prop value enum
func (m *GroupsV2GroupQuery) validateGroupMemberCountFilterEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, groupsV2GroupQueryTypeGroupMemberCountFilterPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GroupsV2GroupQuery) validateGroupMemberCountFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupMemberCountFilter) { // not required
		return nil
	}

	// value enum
	if err := m.validateGroupMemberCountFilterEnum("groupMemberCountFilter", "body", m.GroupMemberCountFilter); err != nil {
		return err
	}

	return nil
}

func (m *GroupsV2GroupQuery) validateGroupType(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupType) { // not required
		return nil
	}

	if err := m.GroupType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("groupType")
		}
		return err
	}

	return nil
}

func (m *GroupsV2GroupQuery) validateSortBy(formats strfmt.Registry) error {

	if swag.IsZero(m.SortBy) { // not required
		return nil
	}

	if err := m.SortBy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sortBy")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupsV2GroupQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupsV2GroupQuery) UnmarshalBinary(b []byte) error {
	var res GroupsV2GroupQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
