// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinySandboxPerkDefinition Perks are modifiers to a character or item that can be applied situationally.
// - Perks determine a weapons' damage type.
// - Perks put the Mods in Modifiers (they are literally the entity that bestows the Sandbox benefit for whatever fluff text about the modifier in the Socket, Plug or Talent Node)
// - Perks are applied for unique alterations of state in Objectives
// Anyways, I'm sure you can see why perks are so interesting.
// What Perks often don't have is human readable information, so we attempt to reverse engineer that by pulling that data from places that uniquely refer to these perks: namely, Talent Nodes and Plugs. That only gives us a subset of perks that are human readable, but those perks are the ones people generally care about anyways. The others are left as a mystery, their true purpose mostly unknown and undocumented.
// swagger:model Destiny.Definitions.DestinySandboxPerkDefinition

type DestinyDefinitionsDestinySandboxPerkDefinition struct {

	// If this perk grants a damage type to a weapon, the damage type will be defined here.
	// Unless you have a compelling reason to use this enum value, use the damageTypeHash instead to look up the actual DestinyDamageTypeDefinition.
	DamageType DestinyDamageType `json:"damageType,omitempty"`

	// The hash identifier for looking up the DestinyDamageTypeDefinition, if this perk has a damage type.
	// This is preferred over using the damageType enumeration value, which has been left purely because it is occasionally convenient.
	DamageTypeHash uint32 `json:"damageTypeHash,omitempty"`

	// These display properties are by no means guaranteed to be populated. Usually when it is, it's only because we back-filled them with the displayProperties of some Talent Node or Plug item that happened to be uniquely providing that perk.
	DisplayProperties *DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition `json:"displayProperties,omitempty"`

	// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
	// When entities refer to each other in Destiny content, it is this hash that they are referring to.
	Hash uint32 `json:"hash,omitempty"`

	// The index of the entity as it was found in the investment tables.
	Index int32 `json:"index,omitempty"`

	// If true, you can actually show the perk in the UI. Otherwise, it doesn't have useful player-facing information.
	IsDisplayable bool `json:"isDisplayable,omitempty"`

	// An old holdover from the original Armory, this was an attempt to group perks by functionality.
	// It is as yet unpopulated, and there will be quite a bit of work needed to restore it to its former working order.
	PerkGroups *DestinyDefinitionsDestinyTalentNodeStepGroups `json:"perkGroups,omitempty"`

	// The string identifier for the perk.
	PerkIdentifier string `json:"perkIdentifier,omitempty"`

	// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
	Redacted bool `json:"redacted,omitempty"`
}

/* polymorph Destiny.Definitions.DestinySandboxPerkDefinition damageType false */

/* polymorph Destiny.Definitions.DestinySandboxPerkDefinition damageTypeHash false */

/* polymorph Destiny.Definitions.DestinySandboxPerkDefinition displayProperties false */

/* polymorph Destiny.Definitions.DestinySandboxPerkDefinition hash false */

/* polymorph Destiny.Definitions.DestinySandboxPerkDefinition index false */

/* polymorph Destiny.Definitions.DestinySandboxPerkDefinition isDisplayable false */

/* polymorph Destiny.Definitions.DestinySandboxPerkDefinition perkGroups false */

/* polymorph Destiny.Definitions.DestinySandboxPerkDefinition perkIdentifier false */

/* polymorph Destiny.Definitions.DestinySandboxPerkDefinition redacted false */

// Validate validates this destiny definitions destiny sandbox perk definition
func (m *DestinyDefinitionsDestinySandboxPerkDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDamageType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePerkGroups(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsDestinySandboxPerkDefinition) validateDamageType(formats strfmt.Registry) error {

	if swag.IsZero(m.DamageType) { // not required
		return nil
	}

	if err := m.DamageType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("damageType")
		}
		return err
	}

	return nil
}

func (m *DestinyDefinitionsDestinySandboxPerkDefinition) validateDisplayProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayProperties) { // not required
		return nil
	}

	if m.DisplayProperties != nil {

		if err := m.DisplayProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("displayProperties")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinySandboxPerkDefinition) validatePerkGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.PerkGroups) { // not required
		return nil
	}

	if m.PerkGroups != nil {

		if err := m.PerkGroups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perkGroups")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinySandboxPerkDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinySandboxPerkDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinySandboxPerkDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
