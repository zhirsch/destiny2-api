// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CommunityCommunityLiveStatus community community live status
// swagger:model Community.CommunityLiveStatus

type CommunityCommunityLiveStatus struct {

	// activity mode hash
	ActivityModeHash uint32 `json:"activityModeHash,omitempty"`

	// current activity hash
	CurrentActivityHash uint32 `json:"currentActivityHash,omitempty"`

	// current viewers
	CurrentViewers int32 `json:"currentViewers,omitempty"`

	// date featured
	DateFeatured strfmt.DateTime `json:"dateFeatured,omitempty"`

	// date last played
	DateLastPlayed strfmt.DateTime `json:"dateLastPlayed,omitempty"`

	// date status updated
	DateStatusUpdated strfmt.DateTime `json:"dateStatusUpdated,omitempty"`

	// date stream started
	DateStreamStarted strfmt.DateTime `json:"dateStreamStarted,omitempty"`

	// destiny character Id
	DestinyCharacterID int64 `json:"destinyCharacterId,omitempty"`

	// followers
	Followers int32 `json:"followers,omitempty"`

	// is featured
	IsFeatured bool `json:"isFeatured,omitempty"`

	// is subscribable
	IsSubscribable bool `json:"isSubscribable,omitempty"`

	// locale
	Locale string `json:"locale,omitempty"`

	// overall viewers
	OverallViewers int32 `json:"overallViewers,omitempty"`

	// partnership identifier
	PartnershipIdentifier string `json:"partnershipIdentifier,omitempty"`

	// partnership type
	PartnershipType PartnershipsPartnershipType `json:"partnershipType,omitempty"`

	// thumbnail
	Thumbnail string `json:"thumbnail,omitempty"`

	// thumbnail large
	ThumbnailLarge string `json:"thumbnailLarge,omitempty"`

	// thumbnail small
	ThumbnailSmall string `json:"thumbnailSmall,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// trending value
	TrendingValue float32 `json:"trendingValue,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// user info
	UserInfo *UserUserInfoCard `json:"userInfo,omitempty"`
}

/* polymorph Community.CommunityLiveStatus activityModeHash false */

/* polymorph Community.CommunityLiveStatus currentActivityHash false */

/* polymorph Community.CommunityLiveStatus currentViewers false */

/* polymorph Community.CommunityLiveStatus dateFeatured false */

/* polymorph Community.CommunityLiveStatus dateLastPlayed false */

/* polymorph Community.CommunityLiveStatus dateStatusUpdated false */

/* polymorph Community.CommunityLiveStatus dateStreamStarted false */

/* polymorph Community.CommunityLiveStatus destinyCharacterId false */

/* polymorph Community.CommunityLiveStatus followers false */

/* polymorph Community.CommunityLiveStatus isFeatured false */

/* polymorph Community.CommunityLiveStatus isSubscribable false */

/* polymorph Community.CommunityLiveStatus locale false */

/* polymorph Community.CommunityLiveStatus overallViewers false */

/* polymorph Community.CommunityLiveStatus partnershipIdentifier false */

/* polymorph Community.CommunityLiveStatus partnershipType false */

/* polymorph Community.CommunityLiveStatus thumbnail false */

/* polymorph Community.CommunityLiveStatus thumbnailLarge false */

/* polymorph Community.CommunityLiveStatus thumbnailSmall false */

/* polymorph Community.CommunityLiveStatus title false */

/* polymorph Community.CommunityLiveStatus trendingValue false */

/* polymorph Community.CommunityLiveStatus url false */

/* polymorph Community.CommunityLiveStatus userInfo false */

// Validate validates this community community live status
func (m *CommunityCommunityLiveStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePartnershipType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommunityCommunityLiveStatus) validatePartnershipType(formats strfmt.Registry) error {

	if swag.IsZero(m.PartnershipType) { // not required
		return nil
	}

	if err := m.PartnershipType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("partnershipType")
		}
		return err
	}

	return nil
}

func (m *CommunityCommunityLiveStatus) validateUserInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.UserInfo) { // not required
		return nil
	}

	if m.UserInfo != nil {

		if err := m.UserInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommunityCommunityLiveStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommunityCommunityLiveStatus) UnmarshalBinary(b []byte) error {
	var res CommunityCommunityLiveStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
