// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// DestinySpecialItemType As you run into items that need to be classified for Milestone purposes in ways that we cannot infer via Babel or Bonbobo-sourced data, add a new classification here and use a string constant to represent it in the local item config file.
// NOTE: This is not all of the item types available, and some of these are holdovers from Destiny 1 that may or may not still exist.
// swagger:model Destiny.SpecialItemType

type DestinySpecialItemType int32

// for schema
var destinySpecialItemTypeEnum []interface{}

func init() {
	var res []DestinySpecialItemType
	if err := json.Unmarshal([]byte(`[0,1,8,9,23,24,25,27,29]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		destinySpecialItemTypeEnum = append(destinySpecialItemTypeEnum, v)
	}
}

func (m DestinySpecialItemType) validateDestinySpecialItemTypeEnum(path, location string, value DestinySpecialItemType) error {
	if err := validate.Enum(path, location, value, destinySpecialItemTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this destiny special item type
func (m DestinySpecialItemType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDestinySpecialItemTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
