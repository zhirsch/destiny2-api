// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyVendorDefinition These are the definitions for Vendors.
// In Destiny, a Vendor can be a lot of things - some things that you wouldn't expect, and some things that you don't even see directly in the game. Vendors are the Dolly Levi of the Destiny universe.
// - Traditional Vendors as you see in game: people who you come up to and who give you quests, rewards, or who you can buy things from.
// - Kiosks/Collections, which are really just Vendors that don't charge currency (or charge some pittance of a currency) and whose gating for purchases revolves more around your character's state.
// - Previews for rewards or the contents of sacks. These are implemented as Vendors, where you can't actually purchase from them but the items that they have for sale and the categories of sale items reflect the rewards or contents of the sack. This is so that the game could reuse the existing Vendor display UI for rewards and save a bunch of wheel reinvention.
// - Item Transfer capabilities, like the Vault and Postmaster. Vendors can have "acceptedItem" buckets that determine the source and destination buckets for transfers. When you interact with such a vendor, these buckets are what gets shown in the UI instead of any items that the Vendor would have for sale. Yep, the Vault is a vendor.
// It is pretty much guaranteed that they'll be used for even more features in the future. They have come to be seen more as generic categorized containers for items than "vendors" in a traditional sense, for better or worse.
// Where possible and time allows, we'll attempt to split those out into their own more digestible derived "Definitions": but often time does not allow that, as you can see from the above ways that vendors are used which we never split off from Vendor Definitions externally.
// Since Vendors are so many things to so many parts of the game, the definition is understandably complex. You will want to combine this data with live Vendor information from the API when it is available.
// swagger:model Destiny.Definitions.DestinyVendorDefinition

type DestinyDefinitionsDestinyVendorDefinition struct {

	// accepted items
	AcceptedItems DestinyDefinitionsDestinyVendorDefinitionAcceptedItems `json:"acceptedItems"`

	// actions
	Actions DestinyDefinitionsDestinyVendorDefinitionActions `json:"actions"`

	// If the vendor has a custom localized string describing the "buy" action, that is returned here.
	BuyString string `json:"buyString,omitempty"`

	// categories
	Categories DestinyDefinitionsDestinyVendorDefinitionCategories `json:"categories"`

	// If TRUE, consolidate categories that only differ by trivial properties (such as having minor differences in name)
	ConsolidateCategories bool `json:"consolidateCategories,omitempty"`

	// display categories
	DisplayCategories DestinyDefinitionsDestinyVendorDefinitionDisplayCategories `json:"displayCategories"`

	// If the vendor has an item that should be displayed as the "featured" item, this is the hash identifier for that DestinyVendorItemDefinition.
	// Apparently this is usually a related currency, like a reputation token. But it need not be restricted to that.
	DisplayItemHash uint32 `json:"displayItemHash,omitempty"`

	// display properties
	DisplayProperties *DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition `json:"displayProperties,omitempty"`

	// If a vendor is not enabled, we won't even save the vendor's definition, and we won't return any items or info about them. It's as if they don't exist.
	Enabled bool `json:"enabled,omitempty"`

	// If the Vendor has a faction, this hash will be valid and point to a DestinyFactionDefinition.
	// The game UI and BNet often mine the faction definition for additional elements and details to place on the screen, such as the faction's Progression status (aka "Reputation").
	FactionHash uint32 `json:"factionHash,omitempty"`

	// If an item can't be purchased from the vendor, there may be many "custom"/game state specific reasons why not.
	// This is a list of localized strings with messages for those custom failures. The live BNet data will return a failureIndexes property for items that can't be purchased: using those values to index into this array, you can show the user the appropriate failure message for the item that can't be bought.
	FailureStrings []string `json:"failureStrings"`

	// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
	// When entities refer to each other in Destiny content, it is this hash that they are referring to.
	Hash uint32 `json:"hash,omitempty"`

	// The index of the entity as it was found in the investment tables.
	Index int32 `json:"index,omitempty"`

	// If this is true, you aren't allowed to buy whatever the vendor is selling.
	InhibitBuying bool `json:"inhibitBuying,omitempty"`

	// If this is true, you're not allowed to sell whatever the vendor is buying.
	InhibitSelling bool `json:"inhibitSelling,omitempty"`

	// interactions
	Interactions DestinyDefinitionsDestinyVendorDefinitionInteractions `json:"interactions"`

	// inventory flyouts
	InventoryFlyouts DestinyDefinitionsDestinyVendorDefinitionInventoryFlyouts `json:"inventoryFlyouts"`

	// item list
	ItemList DestinyDefinitionsDestinyVendorDefinitionItemList `json:"itemList"`

	// original categories
	OriginalCategories DestinyDefinitionsDestinyVendorDefinitionOriginalCategories `json:"originalCategories"`

	// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
	Redacted bool `json:"redacted,omitempty"`

	// A number used for calculating the frequency of a vendor's inventory resetting/refreshing.
	// Don't worry about calculating this - we do it on the server side and send you the next refresh date with the live data.
	ResetIntervalMinutes int32 `json:"resetIntervalMinutes,omitempty"`

	// Again, used for reset/refreshing of inventory. Don't worry too much about it. Unless you want to.
	ResetOffsetMinutes int32 `json:"resetOffsetMinutes,omitempty"`

	// Ditto for selling. Not that you can sell items to a vendor anymore. Will it come back? Who knows. The string's still there.
	SellString string `json:"sellString,omitempty"`

	// services
	Services DestinyDefinitionsDestinyVendorDefinitionServices `json:"services"`

	// unlock ranges
	UnlockRanges DestinyDefinitionsDestinyVendorDefinitionUnlockRanges `json:"unlockRanges"`

	// If the vendor has a custom banner image, that can be found here.
	VendorBanner string `json:"vendorBanner,omitempty"`

	// The identifier of the VendorCategoryDefinition for this vendor.
	VendorCategoryIdentifier string `json:"vendorCategoryIdentifier,omitempty"`

	// The internal identifier for the Vendor. A holdover from the old days of Vendors, but we don't have time to refactor it away.
	VendorIdentifier string `json:"vendorIdentifier,omitempty"`

	// A portrait of the Vendor's smiling mug. Or frothing tentacles.
	VendorPortrait string `json:"vendorPortrait,omitempty"`

	// The identifier of the VendorCategoryDefinition for this vendor's subcategory.
	VendorSubcategoryIdentifier string `json:"vendorSubcategoryIdentifier,omitempty"`

	// If a vendor is not visible, we still have and will give vendor definition info, but we won't use them for things like Advisors or UI.
	Visible bool `json:"visible,omitempty"`
}

/* polymorph Destiny.Definitions.DestinyVendorDefinition acceptedItems false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition actions false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition buyString false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition categories false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition consolidateCategories false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition displayCategories false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition displayItemHash false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition displayProperties false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition enabled false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition factionHash false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition failureStrings false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition hash false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition index false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition inhibitBuying false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition inhibitSelling false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition interactions false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition inventoryFlyouts false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition itemList false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition originalCategories false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition redacted false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition resetIntervalMinutes false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition resetOffsetMinutes false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition sellString false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition services false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition unlockRanges false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition vendorBanner false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition vendorCategoryIdentifier false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition vendorIdentifier false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition vendorPortrait false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition vendorSubcategoryIdentifier false */

/* polymorph Destiny.Definitions.DestinyVendorDefinition visible false */

// Validate validates this destiny definitions destiny vendor definition
func (m *DestinyDefinitionsDestinyVendorDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFailureStrings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsDestinyVendorDefinition) validateDisplayProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayProperties) { // not required
		return nil
	}

	if m.DisplayProperties != nil {

		if err := m.DisplayProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("displayProperties")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyVendorDefinition) validateFailureStrings(formats strfmt.Registry) error {

	if swag.IsZero(m.FailureStrings) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyVendorDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyVendorDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyVendorDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
