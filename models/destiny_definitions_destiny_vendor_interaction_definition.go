// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyVendorInteractionDefinition A Vendor Interaction is a dialog shown by the vendor other than sale items or transfer screens. The vendor is showing you something, and asking you to reply to it by choosing an option or reward.
// swagger:model Destiny.Definitions.DestinyVendorInteractionDefinition

type DestinyDefinitionsDestinyVendorInteractionDefinition struct {

	// If the vendor interaction has flavor text, this is some of it.
	FlavorLineOne string `json:"flavorLineOne,omitempty"`

	// If the vendor interaction has flavor text, this is the rest of it.
	FlavorLineTwo string `json:"flavorLineTwo,omitempty"`

	// The header for the interaction dialog.
	HeaderDisplayProperties *DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition `json:"headerDisplayProperties,omitempty"`

	// The localized text telling the player what to do when they see this dialog.
	Instructions string `json:"instructions,omitempty"`

	// If this interaction dialog is about a quest, this is the questline related to the interaction. You can use this to show the quest overview, or even the character's status with the quest if you use it to find the character's current Quest Step by checking their inventory against this questlineItemHash's DestinyInventoryItemDefinition.setData.
	QuestlineItemHash uint32 `json:"questlineItemHash,omitempty"`

	// replies
	Replies DestinyDefinitionsDestinyVendorInteractionDefinitionReplies `json:"replies"`

	// If this interaction is displaying rewards, this is the text to use for the header of the reward-displaying section of the interaction.
	RewardBlockLabel string `json:"rewardBlockLabel,omitempty"`

	// If the vendor's reward list is sourced from one of his categories, this is the index into the category array of items to show.
	RewardVendorCategoryIndex int32 `json:"rewardVendorCategoryIndex,omitempty"`

	// sack interaction list
	SackInteractionList DestinyDefinitionsDestinyVendorInteractionDefinitionSackInteractionList `json:"sackInteractionList"`

	// A UI hint for the behavior of the interaction screen. BNet doesn't use this, but you can choose to.
	UIInteractionType uint32 `json:"uiInteractionType,omitempty"`

	// If >= 0, this is the category of sale items to show along with this interaction dialog.
	VendorCategoryIndex int32 `json:"vendorCategoryIndex,omitempty"`
}

/* polymorph Destiny.Definitions.DestinyVendorInteractionDefinition flavorLineOne false */

/* polymorph Destiny.Definitions.DestinyVendorInteractionDefinition flavorLineTwo false */

/* polymorph Destiny.Definitions.DestinyVendorInteractionDefinition headerDisplayProperties false */

/* polymorph Destiny.Definitions.DestinyVendorInteractionDefinition instructions false */

/* polymorph Destiny.Definitions.DestinyVendorInteractionDefinition questlineItemHash false */

/* polymorph Destiny.Definitions.DestinyVendorInteractionDefinition replies false */

/* polymorph Destiny.Definitions.DestinyVendorInteractionDefinition rewardBlockLabel false */

/* polymorph Destiny.Definitions.DestinyVendorInteractionDefinition rewardVendorCategoryIndex false */

/* polymorph Destiny.Definitions.DestinyVendorInteractionDefinition sackInteractionList false */

/* polymorph Destiny.Definitions.DestinyVendorInteractionDefinition uiInteractionType false */

/* polymorph Destiny.Definitions.DestinyVendorInteractionDefinition vendorCategoryIndex false */

// Validate validates this destiny definitions destiny vendor interaction definition
func (m *DestinyDefinitionsDestinyVendorInteractionDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeaderDisplayProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsDestinyVendorInteractionDefinition) validateHeaderDisplayProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.HeaderDisplayProperties) { // not required
		return nil
	}

	if m.HeaderDisplayProperties != nil {

		if err := m.HeaderDisplayProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headerDisplayProperties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyVendorInteractionDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyVendorInteractionDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyVendorInteractionDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
