// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// DestinyDestinyItemType An enumeration that indicates the high-level "type" of the item, attempting to iron out the context specific differences for specific instances of an entity. For instance, though a weapon may be of various wepaon "Types", in DestinyItemType they are all classified as "Weapon". This allows for better filtering on a higher level of abstraction for the concept of types.
//  This enum is provided for historical compatibility with Destiny 1, but an ideal alternative is to use DestinyItemCategoryDefinitions and the DestinyItemDefinition.itemCategories property instead. Item Categories allow for arbitrary hierarchies of specificity, and for items to belong to multiple categories across multiple hierarchies simultaneously. For this enum, we pick a single type as a "best guess" fit.
//  NOTE: This is not all of the item types available, and some of these are holdovers from Destiny 1 that may or may not still exist.
// swagger:model Destiny.DestinyItemType

type DestinyDestinyItemType int32

// for schema
var destinyDestinyItemTypeEnum []interface{}

func init() {
	var res []DestinyDestinyItemType
	if err := json.Unmarshal([]byte(`[0,1,2,3,7,8,9,10,11,12,13,14,15,16,17,18,19]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		destinyDestinyItemTypeEnum = append(destinyDestinyItemTypeEnum, v)
	}
}

func (m DestinyDestinyItemType) validateDestinyDestinyItemTypeEnum(path, location string, value DestinyDestinyItemType) error {
	if err := validate.Enum(path, location, value, destinyDestinyItemTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this destiny destiny item type
func (m DestinyDestinyItemType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDestinyDestinyItemTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
