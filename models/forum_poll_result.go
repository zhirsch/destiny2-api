// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ForumPollResult forum poll result
// swagger:model Forum.PollResult

type ForumPollResult struct {

	// answer slot
	AnswerSlot int32 `json:"answerSlot,omitempty"`

	// answer text
	AnswerText string `json:"answerText,omitempty"`

	// last vote date
	LastVoteDate strfmt.DateTime `json:"lastVoteDate,omitempty"`

	// requesting user voted
	RequestingUserVoted bool `json:"requestingUserVoted,omitempty"`

	// votes
	Votes int32 `json:"votes,omitempty"`
}

/* polymorph Forum.PollResult answerSlot false */

/* polymorph Forum.PollResult answerText false */

/* polymorph Forum.PollResult lastVoteDate false */

/* polymorph Forum.PollResult requestingUserVoted false */

/* polymorph Forum.PollResult votes false */

// Validate validates this forum poll result
func (m *ForumPollResult) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ForumPollResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ForumPollResult) UnmarshalBinary(b []byte) error {
	var res ForumPollResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
