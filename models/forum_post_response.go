// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ForumPostResponse forum post response
// swagger:model Forum.PostResponse

type ForumPostResponse struct {

	// is pinned
	IsPinned bool `json:"IsPinned,omitempty"`

	// ignore status
	IgnoreStatus *IgnoresIgnoreResponse `json:"ignoreStatus,omitempty"`

	// is active
	IsActive bool `json:"isActive,omitempty"`

	// is announcement
	IsAnnouncement bool `json:"isAnnouncement,omitempty"`

	// last reply timestamp
	LastReplyTimestamp strfmt.DateTime `json:"lastReplyTimestamp,omitempty"`

	// latest reply author Id
	LatestReplyAuthorID int64 `json:"latestReplyAuthorId,omitempty"`

	// latest reply post Id
	LatestReplyPostID int64 `json:"latestReplyPostId,omitempty"`

	// locale
	Locale string `json:"locale,omitempty"`

	// popularity
	Popularity ForumForumPostPopularity `json:"popularity,omitempty"`

	// thumbnail
	Thumbnail string `json:"thumbnail,omitempty"`

	// url media type
	URLMediaType ForumForumMediaType `json:"urlMediaType,omitempty"`

	// user has muted post
	UserHasMutedPost bool `json:"userHasMutedPost,omitempty"`

	// user has rated
	UserHasRated bool `json:"userHasRated,omitempty"`

	// user rating
	UserRating int32 `json:"userRating,omitempty"`
}

/* polymorph Forum.PostResponse IsPinned false */

/* polymorph Forum.PostResponse ignoreStatus false */

/* polymorph Forum.PostResponse isActive false */

/* polymorph Forum.PostResponse isAnnouncement false */

/* polymorph Forum.PostResponse lastReplyTimestamp false */

/* polymorph Forum.PostResponse latestReplyAuthorId false */

/* polymorph Forum.PostResponse latestReplyPostId false */

/* polymorph Forum.PostResponse locale false */

/* polymorph Forum.PostResponse popularity false */

/* polymorph Forum.PostResponse thumbnail false */

/* polymorph Forum.PostResponse urlMediaType false */

/* polymorph Forum.PostResponse userHasMutedPost false */

/* polymorph Forum.PostResponse userHasRated false */

/* polymorph Forum.PostResponse userRating false */

// Validate validates this forum post response
func (m *ForumPostResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIgnoreStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePopularity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateURLMediaType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ForumPostResponse) validateIgnoreStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.IgnoreStatus) { // not required
		return nil
	}

	if m.IgnoreStatus != nil {

		if err := m.IgnoreStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ignoreStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ForumPostResponse) validatePopularity(formats strfmt.Registry) error {

	if swag.IsZero(m.Popularity) { // not required
		return nil
	}

	if err := m.Popularity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("popularity")
		}
		return err
	}

	return nil
}

func (m *ForumPostResponse) validateURLMediaType(formats strfmt.Registry) error {

	if swag.IsZero(m.URLMediaType) { // not required
		return nil
	}

	if err := m.URLMediaType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("urlMediaType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ForumPostResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ForumPostResponse) UnmarshalBinary(b []byte) error {
	var res ForumPostResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
