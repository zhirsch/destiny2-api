// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyItemStatBlockDefinition Information about the item's calculated stats, with as much data as we can find for the stats without having an actual instance of the item.
// Note that this means the entire concept of providing these stats is fundamentally insufficient: we cannot predict with 100% accuracy the conditions under which an item can spawn, so we use various heuristics to attempt to simulate the conditions as accurately as possible. Actual stats for items in-game can and will vary, but these should at least be useful base points for comparison and display.
// It is also worth noting that some stats, like Magazine size, have further calculations performed on them by scripts in-game and on the game servers that BNet does not have access to. We cannot know how those stats are further transformed, and thus some stats will be inaccurate even on instances of items in BNet vs. how they appear in-game. This is a known limitation of our item statistics, without any planned fix.
// swagger:model Destiny.Definitions.DestinyItemStatBlockDefinition

type DestinyDefinitionsDestinyItemStatBlockDefinition struct {

	// A quick and lazy way to determine whether any stat other than the "primary" stat is actually visible on the item. Items often have stats that we return in case people find them useful, but they're not part of the "Stat Group" and thus we wouldn't display them in our UI. If this is False, then we're not going to display any of these stats other than the primary one.
	HasDisplayableStats bool `json:"hasDisplayableStats,omitempty"`

	// This stat is determined to be the "primary" stat, and can be looked up in the stats or any other stat collection related to the item.
	// Use this hash to look up the stat's value using DestinyInventoryItemDefinition.stats.stats, and the renderable data for the primary stat in the related DestinyStatDefinition.
	PrimaryBaseStatHash uint32 `json:"primaryBaseStatHash,omitempty"`

	// If the item's stats are meant to be modified by a DestinyStatGroupDefinition, this will be the identifier for that definition.
	// If you are using live data or precomputed stats data on the DestinyInventoryItemDefinition.stats.stats property, you don't have to worry about statGroupHash and how it alters stats: the already altered stats are provided to you. But if you want to see how the sausage gets made, or perform computations yourself, this is valuable information.
	StatGroupHash uint32 `json:"statGroupHash,omitempty"`

	// stats
	Stats DestinyDefinitionsDestinyItemStatBlockDefinitionStats `json:"stats,omitempty"`
}

/* polymorph Destiny.Definitions.DestinyItemStatBlockDefinition hasDisplayableStats false */

/* polymorph Destiny.Definitions.DestinyItemStatBlockDefinition primaryBaseStatHash false */

/* polymorph Destiny.Definitions.DestinyItemStatBlockDefinition statGroupHash false */

/* polymorph Destiny.Definitions.DestinyItemStatBlockDefinition stats false */

// Validate validates this destiny definitions destiny item stat block definition
func (m *DestinyDefinitionsDestinyItemStatBlockDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyItemStatBlockDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyItemStatBlockDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyItemStatBlockDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
