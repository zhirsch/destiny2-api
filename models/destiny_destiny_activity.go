// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDestinyActivity Represents the "Live" data that we can obtain about a Character's status with a specific Activity. This will tell you whether the character can participate in the activity, as well as some other basic mutable information.
// Meant to be combined with static DestinyActivityDefinition data for a full picture of the Activity.
// swagger:model Destiny.DestinyActivity

type DestinyDestinyActivity struct {

	// The hash identifier of the Activity. Use this to look up the DestinyActivityDefinition of the activity.
	ActivityHash uint32 `json:"activityHash,omitempty"`

	// If true, the user is allowed to join with another Fireteam in this activity.
	CanJoin bool `json:"canJoin,omitempty"`

	// If true, the user is allowed to lead a Fireteam into this activity.
	CanLead bool `json:"canLead,omitempty"`

	// A DestinyActivityDifficultyTier enum value indicating the difficulty of the activity.
	DifficultyTier DestinyDestinyActivityDifficultyTier `json:"difficultyTier,omitempty"`

	// The difficulty level of the activity, if applicable.
	DisplayLevel int32 `json:"displayLevel,omitempty"`

	// If true, we both have the ability to know that the user has completed this activity and they have completed it. Unfortunately, we can't necessarily know this for all activities. As such, this should probably only be used if you already know in advance which specific activities you wish to check.
	IsCompleted bool `json:"isCompleted,omitempty"`

	// If true, then the activity should have a "new" indicator in the Director UI.
	IsNew bool `json:"isNew,omitempty"`

	// If true, the user should be able to see this activity.
	IsVisible bool `json:"isVisible,omitempty"`

	// The recommended light level for the activity, if applicable.
	RecommendedLight int32 `json:"recommendedLight,omitempty"`
}

/* polymorph Destiny.DestinyActivity activityHash false */

/* polymorph Destiny.DestinyActivity canJoin false */

/* polymorph Destiny.DestinyActivity canLead false */

/* polymorph Destiny.DestinyActivity difficultyTier false */

/* polymorph Destiny.DestinyActivity displayLevel false */

/* polymorph Destiny.DestinyActivity isCompleted false */

/* polymorph Destiny.DestinyActivity isNew false */

/* polymorph Destiny.DestinyActivity isVisible false */

/* polymorph Destiny.DestinyActivity recommendedLight false */

// Validate validates this destiny destiny activity
func (m *DestinyDestinyActivity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDifficultyTier(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDestinyActivity) validateDifficultyTier(formats strfmt.Registry) error {

	if swag.IsZero(m.DifficultyTier) { // not required
		return nil
	}

	if err := m.DifficultyTier.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("difficultyTier")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDestinyActivity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDestinyActivity) UnmarshalBinary(b []byte) error {
	var res DestinyDestinyActivity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
