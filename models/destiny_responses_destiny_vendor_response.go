// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyResponsesDestinyVendorResponse A response containing all of the components for a vendor.
// swagger:model Destiny.Responses.DestinyVendorResponse

type DestinyResponsesDestinyVendorResponse struct {

	// Categories that the vendor has available, and references to the sales therein.
	// COMPONENT TYPE: VendorCategories
	Categories *SingleComponentResponseOfDestinyVendorCategoriesComponent `json:"categories,omitempty"`

	// Item components, keyed by the vendorItemIndex of the active sale items.
	// COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
	Items *DestinyItemComponentSetOfint32 `json:"items,omitempty"`

	// Sales, keyed by the vendorItemIndex of the item being sold.
	// COMPONENT TYPE: VendorSales
	Sales *DictionaryComponentResponseOfint32AndDestinyVendorSaleItemComponent `json:"sales,omitempty"`

	// The base properties of the vendor.
	// COMPONENT TYPE: Vendors
	Vendor *SingleComponentResponseOfDestinyVendorComponent `json:"vendor,omitempty"`
}

/* polymorph Destiny.Responses.DestinyVendorResponse categories false */

/* polymorph Destiny.Responses.DestinyVendorResponse items false */

/* polymorph Destiny.Responses.DestinyVendorResponse sales false */

/* polymorph Destiny.Responses.DestinyVendorResponse vendor false */

// Validate validates this destiny responses destiny vendor response
func (m *DestinyResponsesDestinyVendorResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategories(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSales(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVendor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyResponsesDestinyVendorResponse) validateCategories(formats strfmt.Registry) error {

	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	if m.Categories != nil {

		if err := m.Categories.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("categories")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyVendorResponse) validateItems(formats strfmt.Registry) error {

	if swag.IsZero(m.Items) { // not required
		return nil
	}

	if m.Items != nil {

		if err := m.Items.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("items")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyVendorResponse) validateSales(formats strfmt.Registry) error {

	if swag.IsZero(m.Sales) { // not required
		return nil
	}

	if m.Sales != nil {

		if err := m.Sales.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sales")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyVendorResponse) validateVendor(formats strfmt.Registry) error {

	if swag.IsZero(m.Vendor) { // not required
		return nil
	}

	if m.Vendor != nil {

		if err := m.Vendor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vendor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyResponsesDestinyVendorResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyResponsesDestinyVendorResponse) UnmarshalBinary(b []byte) error {
	var res DestinyResponsesDestinyVendorResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
