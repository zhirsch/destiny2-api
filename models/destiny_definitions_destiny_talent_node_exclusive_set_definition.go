// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyTalentNodeExclusiveSetDefinition The list of indexes into the Talent Grid's "nodes" property for nodes in this exclusive set. (See DestinyTalentNodeDefinition.nodeIndex)
// swagger:model Destiny.Definitions.DestinyTalentNodeExclusiveSetDefinition

type DestinyDefinitionsDestinyTalentNodeExclusiveSetDefinition struct {

	// The list of node indexes for the exclusive set. Historically, these were indexes. I would have liked to replace this with nodeHashes for consistency, but it's way too late for that. (9:09 PM, he's right!)
	NodeIndexes []int32 `json:"nodeIndexes"`
}

/* polymorph Destiny.Definitions.DestinyTalentNodeExclusiveSetDefinition nodeIndexes false */

// Validate validates this destiny definitions destiny talent node exclusive set definition
func (m *DestinyDefinitionsDestinyTalentNodeExclusiveSetDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeIndexes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsDestinyTalentNodeExclusiveSetDefinition) validateNodeIndexes(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeIndexes) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyTalentNodeExclusiveSetDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyTalentNodeExclusiveSetDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyTalentNodeExclusiveSetDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
