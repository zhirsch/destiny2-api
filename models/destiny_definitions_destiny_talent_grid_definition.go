// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyTalentGridDefinition The time has unfortunately come to talk about Talent Grids.
// Talent Grids are the most complex and unintuitive part of the Destiny Definition data. Grab a cup of coffee before we begin, I can wait.
// Talent Grids were the primary way that items could be customized in Destiny 1. In Destiny 2, for now, talent grids have become exclusively used by Subclass/Build items: but the system is still in place for it to be used by items should the direction change back toward talent grids.
// Talent Grids have Nodes: the visual circles on the talent grid detail screen that have icons and can be activated if you meet certain requirements and pay costs. The actual visual data and effects, however, are driven by the "Steps" on Talent Nodes. Any given node will have 1:M of these steps, and the specific step that will be considered the "current" step (and thus the dictator of all benefits, visual state, and activation requirements on the Node) will almost always not be determined until an instance of the item is created. This is how, in Destiny 1, items were able to have such a wide variety of what users saw as "Perks": they were actually Talent Grids with nodes that had a wide variety of Steps, randomly chosen at the time of item creation.
// Now that Talent Grids are used exclusively by subclasses and builds, all of the properties within still apply: but there are additional visual elements on the Subclass/Build screens that are superimposed on top of the talent nodes. Unfortunately, BNet doesn't have this data: if you want to build a subclass screen, you will have to provide your own "decorative" assets, such as the visual connectors between nodes and the fancy colored-fire-bathed character standing behind the nodes.
// DestinyInventoryItem.talentGrid.talentGridHash defines an item's linked Talent Grid, which brings you to this definition that contains enough satic data about talent grids to make your head spin. These *must* be combined with instanced data - found when live data returns DestinyItemTalentGridComponent - in order to derive meaning. The instanced data will reference nodes and steps within these definitions, which you will then have to look up in the definition and combine with the instanced data to give the user the visual representation of their item's talent grid.
// swagger:model Destiny.Definitions.DestinyTalentGridDefinition

type DestinyDefinitionsDestinyTalentGridDefinition struct {

	// exclusive sets
	ExclusiveSets DestinyDefinitionsDestinyTalentGridDefinitionExclusiveSets `json:"exclusiveSets"`

	// The meaning of this has been lost in the sands of time: it still exists as a property, but appears to be unused in the modern UI of talent grids. It used to imply that each visual "column" of talent nodes required identical progression levels in order to be activated. Returning this value in case it is still useful to someone? Perhaps it's just a bit of interesting history.
	GridLevelPerColumn int32 `json:"gridLevelPerColumn,omitempty"`

	// groups
	Groups DestinyDefinitionsDestinyTalentGridDefinitionGroups `json:"groups,omitempty"`

	// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
	// When entities refer to each other in Destiny content, it is this hash that they are referring to.
	Hash uint32 `json:"hash,omitempty"`

	// This is a quick reference to the indexes of nodes that are not part of exclusive sets. Handy for knowing which talent nodes can only be activated directly, rather than via swapping.
	IndependentNodeIndexes []int32 `json:"independentNodeIndexes"`

	// The index of the entity as it was found in the investment tables.
	Index int32 `json:"index,omitempty"`

	// The maximum possible level of the Talent Grid: at this level, any nodes are allowed to be activated.
	MaxGridLevel int32 `json:"maxGridLevel,omitempty"`

	// node categories
	NodeCategories DestinyDefinitionsDestinyTalentGridDefinitionNodeCategories `json:"nodeCategories"`

	// nodes
	Nodes DestinyDefinitionsDestinyTalentGridDefinitionNodes `json:"nodes"`

	// The hash identifier of the Progression (DestinyProgressionDefinition) that drives whether and when Talent Nodes can be activated on the Grid. Items will have instances of this Progression, and will gain experience that will eventually cause the grid to increase in level. As the grid's level increases, it will cross the threshold where nodes can be activated. See DestinyTalentGridStepDefinition's activation requirements for more information.
	ProgressionHash uint32 `json:"progressionHash,omitempty"`

	// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
	Redacted bool `json:"redacted,omitempty"`
}

/* polymorph Destiny.Definitions.DestinyTalentGridDefinition exclusiveSets false */

/* polymorph Destiny.Definitions.DestinyTalentGridDefinition gridLevelPerColumn false */

/* polymorph Destiny.Definitions.DestinyTalentGridDefinition groups false */

/* polymorph Destiny.Definitions.DestinyTalentGridDefinition hash false */

/* polymorph Destiny.Definitions.DestinyTalentGridDefinition independentNodeIndexes false */

/* polymorph Destiny.Definitions.DestinyTalentGridDefinition index false */

/* polymorph Destiny.Definitions.DestinyTalentGridDefinition maxGridLevel false */

/* polymorph Destiny.Definitions.DestinyTalentGridDefinition nodeCategories false */

/* polymorph Destiny.Definitions.DestinyTalentGridDefinition nodes false */

/* polymorph Destiny.Definitions.DestinyTalentGridDefinition progressionHash false */

/* polymorph Destiny.Definitions.DestinyTalentGridDefinition redacted false */

// Validate validates this destiny definitions destiny talent grid definition
func (m *DestinyDefinitionsDestinyTalentGridDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIndependentNodeIndexes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsDestinyTalentGridDefinition) validateIndependentNodeIndexes(formats strfmt.Registry) error {

	if swag.IsZero(m.IndependentNodeIndexes) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyTalentGridDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyTalentGridDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyTalentGridDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
