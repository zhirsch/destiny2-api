// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyResponsesDestinyProfileResponse The response for GetDestinyProfile, with components for character and item-level data.
// swagger:model Destiny.Responses.DestinyProfileResponse

type DestinyResponsesDestinyProfileResponse struct {

	// Character activity data - the activities available to this character and its status, keyed by the Character's Id.
	// COMPONENT TYPE: CharacterActivities
	CharacterActivities *DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent `json:"characterActivities,omitempty"`

	// The character's equipped items, keyed by the Character's Id.
	// COMPONENT TYPE: CharacterEquipment
	CharacterEquipment *DictionaryComponentResponseOfint64AndDestinyInventoryComponent `json:"characterEquipment,omitempty"`

	// The character-level non-equipped inventory items, keyed by the Character's Id.
	// COMPONENT TYPE: CharacterInventories
	CharacterInventories *DictionaryComponentResponseOfint64AndDestinyInventoryComponent `json:"characterInventories,omitempty"`

	// Items available from Kiosks that are available to a specific character as opposed to the account as a whole. It must be combined with data from the profileKiosks property to get a full picture of the character's available items to check out of a kiosk.
	// This component returns information about what Kiosk items are available to you on a *Character* level. Usually, kiosk items will be earned for the entire Profile (all characters) at once. To find those, look in the profileKiosks property.
	// COMPONENT TYPE: Kiosks
	CharacterKiosks *DictionaryComponentResponseOfint64AndDestinyKiosksComponent `json:"characterKiosks,omitempty"`

	// Character-level progression data, keyed by the Character's Id.
	// COMPONENT TYPE: CharacterProgressions
	CharacterProgressions *DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent `json:"characterProgressions,omitempty"`

	// Character rendering data - a minimal set of info needed to render a character in 3D - keyed by the Character's Id.
	// COMPONENT TYPE: CharacterRenderData
	CharacterRenderData *DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent `json:"characterRenderData,omitempty"`

	// Basic information about each character, keyed by the CharacterId.
	// COMPONENT TYPE: Characters
	Characters *DictionaryComponentResponseOfint64AndDestinyCharacterComponent `json:"characters,omitempty"`

	// Information about instanced items across all returned characters, keyed by the item's instance ID.
	// COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
	ItemComponents *DestinyItemComponentSetOfint64 `json:"itemComponents,omitempty"`

	// The basic information about the Destiny Profile (formerly "Account").
	// COMPONENT TYPE: Profiles
	Profile *SingleComponentResponseOfDestinyProfileComponent `json:"profile,omitempty"`

	// The profile-level currencies owned by the Destiny Profile.
	// COMPONENT TYPE: ProfileCurrencies
	ProfileCurrencies *SingleComponentResponseOfDestinyInventoryComponent `json:"profileCurrencies,omitempty"`

	// The profile-level inventory of the Destiny Profile.
	// COMPONENT TYPE: ProfileInventories
	ProfileInventory *SingleComponentResponseOfDestinyInventoryComponent `json:"profileInventory,omitempty"`

	// Items available from Kiosks that are available Profile-wide (i.e. across all characters)
	// This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the characterKiosks property.
	// COMPONENT TYPE: Kiosks
	ProfileKiosks *SingleComponentResponseOfDestinyKiosksComponent `json:"profileKiosks,omitempty"`

	// Recent, refundable purchases you have made from vendors. When will you use it? Couldn't say...
	// COMPONENT TYPE: VendorReceipts
	VendorReceipts *SingleComponentResponseOfDestinyVendorReceiptsComponent `json:"vendorReceipts,omitempty"`
}

/* polymorph Destiny.Responses.DestinyProfileResponse characterActivities false */

/* polymorph Destiny.Responses.DestinyProfileResponse characterEquipment false */

/* polymorph Destiny.Responses.DestinyProfileResponse characterInventories false */

/* polymorph Destiny.Responses.DestinyProfileResponse characterKiosks false */

/* polymorph Destiny.Responses.DestinyProfileResponse characterProgressions false */

/* polymorph Destiny.Responses.DestinyProfileResponse characterRenderData false */

/* polymorph Destiny.Responses.DestinyProfileResponse characters false */

/* polymorph Destiny.Responses.DestinyProfileResponse itemComponents false */

/* polymorph Destiny.Responses.DestinyProfileResponse profile false */

/* polymorph Destiny.Responses.DestinyProfileResponse profileCurrencies false */

/* polymorph Destiny.Responses.DestinyProfileResponse profileInventory false */

/* polymorph Destiny.Responses.DestinyProfileResponse profileKiosks false */

/* polymorph Destiny.Responses.DestinyProfileResponse vendorReceipts false */

// Validate validates this destiny responses destiny profile response
func (m *DestinyResponsesDestinyProfileResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCharacterActivities(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCharacterEquipment(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCharacterInventories(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCharacterKiosks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCharacterProgressions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCharacterRenderData(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCharacters(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateItemComponents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProfileCurrencies(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProfileInventory(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProfileKiosks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVendorReceipts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyResponsesDestinyProfileResponse) validateCharacterActivities(formats strfmt.Registry) error {

	if swag.IsZero(m.CharacterActivities) { // not required
		return nil
	}

	if m.CharacterActivities != nil {

		if err := m.CharacterActivities.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("characterActivities")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyProfileResponse) validateCharacterEquipment(formats strfmt.Registry) error {

	if swag.IsZero(m.CharacterEquipment) { // not required
		return nil
	}

	if m.CharacterEquipment != nil {

		if err := m.CharacterEquipment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("characterEquipment")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyProfileResponse) validateCharacterInventories(formats strfmt.Registry) error {

	if swag.IsZero(m.CharacterInventories) { // not required
		return nil
	}

	if m.CharacterInventories != nil {

		if err := m.CharacterInventories.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("characterInventories")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyProfileResponse) validateCharacterKiosks(formats strfmt.Registry) error {

	if swag.IsZero(m.CharacterKiosks) { // not required
		return nil
	}

	if m.CharacterKiosks != nil {

		if err := m.CharacterKiosks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("characterKiosks")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyProfileResponse) validateCharacterProgressions(formats strfmt.Registry) error {

	if swag.IsZero(m.CharacterProgressions) { // not required
		return nil
	}

	if m.CharacterProgressions != nil {

		if err := m.CharacterProgressions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("characterProgressions")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyProfileResponse) validateCharacterRenderData(formats strfmt.Registry) error {

	if swag.IsZero(m.CharacterRenderData) { // not required
		return nil
	}

	if m.CharacterRenderData != nil {

		if err := m.CharacterRenderData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("characterRenderData")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyProfileResponse) validateCharacters(formats strfmt.Registry) error {

	if swag.IsZero(m.Characters) { // not required
		return nil
	}

	if m.Characters != nil {

		if err := m.Characters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("characters")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyProfileResponse) validateItemComponents(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemComponents) { // not required
		return nil
	}

	if m.ItemComponents != nil {

		if err := m.ItemComponents.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("itemComponents")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyProfileResponse) validateProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.Profile) { // not required
		return nil
	}

	if m.Profile != nil {

		if err := m.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyProfileResponse) validateProfileCurrencies(formats strfmt.Registry) error {

	if swag.IsZero(m.ProfileCurrencies) { // not required
		return nil
	}

	if m.ProfileCurrencies != nil {

		if err := m.ProfileCurrencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profileCurrencies")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyProfileResponse) validateProfileInventory(formats strfmt.Registry) error {

	if swag.IsZero(m.ProfileInventory) { // not required
		return nil
	}

	if m.ProfileInventory != nil {

		if err := m.ProfileInventory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profileInventory")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyProfileResponse) validateProfileKiosks(formats strfmt.Registry) error {

	if swag.IsZero(m.ProfileKiosks) { // not required
		return nil
	}

	if m.ProfileKiosks != nil {

		if err := m.ProfileKiosks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profileKiosks")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyProfileResponse) validateVendorReceipts(formats strfmt.Registry) error {

	if swag.IsZero(m.VendorReceipts) { // not required
		return nil
	}

	if m.VendorReceipts != nil {

		if err := m.VendorReceipts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vendorReceipts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyResponsesDestinyProfileResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyResponsesDestinyProfileResponse) UnmarshalBinary(b []byte) error {
	var res DestinyResponsesDestinyProfileResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
