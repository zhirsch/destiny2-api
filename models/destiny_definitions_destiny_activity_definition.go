// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DestinyDefinitionsDestinyActivityDefinition The static data about Activities in Destiny 2.
// Note that an Activity must be combined with an ActivityMode to know - from a Gameplay perspective - what the user is "Playing".
// In most PvE activities, this is fairly straightforward. A Story Activity can only be played in the Story Activity Mode.
// However, in PvP activities, the Activity alone only tells you the map being played, or the Playlist that the user chose to enter. You'll need to know the Activity Mode they're playing to know that they're playing Mode X on Map Y.
// Activity Definitions tell a great deal of information about what *could* be relevant to a user: what rewards they can earn, what challenges could be performed, what modifiers could be applied. To figure out which of these properties is actually live, you'll need to combine the definition with "Live" data from one of the Destiny endpoints.
// Activities also have Activity Types, but unfortunately in Destiny 2 these are even less reliable of a source of information than they were in Destiny 1. I will be looking into ways to provide more reliable sources for type information as time goes on, but for now we're going to have to deal with the limitations. See DestinyActivityTypeDefinition for more information.
// swagger:model Destiny.Definitions.DestinyActivityDefinition

type DestinyDefinitionsDestinyActivityDefinition struct {

	// activity graph list
	ActivityGraphList DestinyDefinitionsDestinyActivityDefinitionActivityGraphList `json:"activityGraphList"`

	// The difficulty level of the activity.
	ActivityLevel int32 `json:"activityLevel,omitempty"`

	// The recommended light level for this activity.
	ActivityLightLevel int32 `json:"activityLightLevel,omitempty"`

	// activity mode hashes
	ActivityModeHashes []uint32 `json:"activityModeHashes"`

	// activity mode types
	ActivityModeTypes []DestinyHistoricalStatsDefinitionsDestinyActivityModeType `json:"activityModeTypes"`

	// The hash identifier for the Activity Type of this Activity. You may use it to look up the DestinyActivityTypeDefinition for human readable info, but be forewarned: Playlists and many PVP Map Activities will map to generic Activity Types. You'll have to use your knowledge of the Activity Mode being played to get more specific information about what the user is playing.
	ActivityTypeHash uint32 `json:"activityTypeHash,omitempty"`

	// challenges
	Challenges DestinyDefinitionsDestinyActivityDefinitionChallenges `json:"challenges"`

	// The hash identifier for the Destination on which this Activity is played. Use it to look up the DestinyDestinationDefinition for human readable info about the destination. A Destination can be thought of as a more specific location than a "Place". For instance, if the "Place" is Earth, the "Destination" would be a specific city or region on Earth.
	DestinationHash uint32 `json:"destinationHash,omitempty"`

	// direct activity mode hash
	DirectActivityModeHash uint32 `json:"directActivityModeHash,omitempty"`

	// direct activity mode type
	DirectActivityModeType int32 `json:"directActivityModeType,omitempty"`

	// The title, subtitle, and icon for the activity.
	DisplayProperties *DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition `json:"displayProperties,omitempty"`

	// This block of data, if it exists, provides information about the guided game experience and restrictions for this activity. If it doesn't exist, the game is not able to be played as a guided game.
	GUIDEDGame *DestinyDefinitionsDestinyActivityGUIDEDBlockDefinition `json:"guidedGame,omitempty"`

	// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
	// When entities refer to each other in Destiny content, it is this hash that they are referring to.
	Hash uint32 `json:"hash,omitempty"`

	// The index of the entity as it was found in the investment tables.
	Index int32 `json:"index,omitempty"`

	// If True, this Activity is actually a Playlist that refers to multiple possible specific Activities and Activity Modes. For instance, a Crucible Playlist may have references to multiple Activities (Maps) with multiple Activity Modes (specific PvP gameplay modes). If this is true, refer to the playlistItems property for the specific entries in the playlist.
	IsPlaylist bool `json:"isPlaylist,omitempty"`

	// If true, this activity is a PVP activity or playlist.
	IsPvP bool `json:"isPvP,omitempty"`

	// This block of data provides information about the Activity's matchmaking attributes: how many people can join and such.
	Matchmaking *DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition `json:"matchmaking,omitempty"`

	// modifiers
	Modifiers DestinyDefinitionsDestinyActivityDefinitionModifiers `json:"modifiers"`

	// optional unlock strings
	OptionalUnlockStrings DestinyDefinitionsDestinyActivityDefinitionOptionalUnlockStrings `json:"optionalUnlockStrings"`

	// When Activities are completed, we generate a "Post-Game Carnage Report", or PGCR, with details about what happened in that activity (how many kills someone got, which team won, etc...) We use this image as the background when displaying PGCR information, and often use it when we refer to the Activity in general.
	PgcrImage string `json:"pgcrImage,omitempty"`

	// The hash identifier for the "Place" on which this Activity is played. Use it to look up the DestinyPlaceDefinition for human readable info about the Place. A Place is the largest-scoped concept for location information. For instance, if the "Place" is Earth, the "Destination" would be a specific city or region on Earth.
	PlaceHash uint32 `json:"placeHash,omitempty"`

	// playlist items
	PlaylistItems DestinyDefinitionsDestinyActivityDefinitionPlaylistItems `json:"playlistItems"`

	// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
	Redacted bool `json:"redacted,omitempty"`

	// If the activity has an icon associated with a specific release (such as a DLC), this is the path to that release's icon.
	ReleaseIcon string `json:"releaseIcon,omitempty"`

	// If the activity will not be visible until a specific and known time, this will be the seconds since the Epoch when it will become visible.
	ReleaseTime int32 `json:"releaseTime,omitempty"`

	// rewards
	Rewards DestinyDefinitionsDestinyActivityDefinitionRewards `json:"rewards"`

	// The difficulty tier of the activity.
	Tier int32 `json:"tier,omitempty"`
}

/* polymorph Destiny.Definitions.DestinyActivityDefinition activityGraphList false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition activityLevel false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition activityLightLevel false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition activityModeHashes false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition activityModeTypes false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition activityTypeHash false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition challenges false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition destinationHash false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition directActivityModeHash false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition directActivityModeType false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition displayProperties false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition guidedGame false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition hash false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition index false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition isPlaylist false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition isPvP false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition matchmaking false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition modifiers false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition optionalUnlockStrings false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition pgcrImage false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition placeHash false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition playlistItems false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition redacted false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition releaseIcon false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition releaseTime false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition rewards false */

/* polymorph Destiny.Definitions.DestinyActivityDefinition tier false */

// Validate validates this destiny definitions destiny activity definition
func (m *DestinyDefinitionsDestinyActivityDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityModeHashes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateActivityModeTypes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDirectActivityModeType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGUIDEDGame(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMatchmaking(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsDestinyActivityDefinition) validateActivityModeHashes(formats strfmt.Registry) error {

	if swag.IsZero(m.ActivityModeHashes) { // not required
		return nil
	}

	return nil
}

func (m *DestinyDefinitionsDestinyActivityDefinition) validateActivityModeTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.ActivityModeTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.ActivityModeTypes); i++ {

		if err := m.ActivityModeTypes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activityModeTypes" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

var destinyDefinitionsDestinyActivityDefinitionTypeDirectActivityModeTypePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,2,3,4,5,6,7,9,10,11,12,13,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,37,38,39,40]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		destinyDefinitionsDestinyActivityDefinitionTypeDirectActivityModeTypePropEnum = append(destinyDefinitionsDestinyActivityDefinitionTypeDirectActivityModeTypePropEnum, v)
	}
}

// prop value enum
func (m *DestinyDefinitionsDestinyActivityDefinition) validateDirectActivityModeTypeEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, destinyDefinitionsDestinyActivityDefinitionTypeDirectActivityModeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DestinyDefinitionsDestinyActivityDefinition) validateDirectActivityModeType(formats strfmt.Registry) error {

	if swag.IsZero(m.DirectActivityModeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectActivityModeTypeEnum("directActivityModeType", "body", m.DirectActivityModeType); err != nil {
		return err
	}

	return nil
}

func (m *DestinyDefinitionsDestinyActivityDefinition) validateDisplayProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayProperties) { // not required
		return nil
	}

	if m.DisplayProperties != nil {

		if err := m.DisplayProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("displayProperties")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyActivityDefinition) validateGUIDEDGame(formats strfmt.Registry) error {

	if swag.IsZero(m.GUIDEDGame) { // not required
		return nil
	}

	if m.GUIDEDGame != nil {

		if err := m.GUIDEDGame.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guidedGame")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyActivityDefinition) validateMatchmaking(formats strfmt.Registry) error {

	if swag.IsZero(m.Matchmaking) { // not required
		return nil
	}

	if m.Matchmaking != nil {

		if err := m.Matchmaking.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matchmaking")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyActivityDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyActivityDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyActivityDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
