// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GroupsV2GroupFeatures groups v2 group features
// swagger:model GroupsV2.GroupFeatures

type GroupsV2GroupFeatures struct {

	// capabilities
	Capabilities GroupsV2Capabilities `json:"capabilities,omitempty"`

	// Minimum Member Level allowed to host guided games
	// Always Allowed: Founder, Acting Founder, Admin
	// Allowed Overrides: None, Member, Beginner
	// Default is Member for clans, None for groups, although this means nothing for groups.
	HostGUIDEDGamePermissionOverride GroupsV2HostGUIDEDGamesPermissionLevel `json:"hostGuidedGamePermissionOverride,omitempty"`

	// Minimum Member Level allowed to invite new members to group
	// Always Allowed: Founder, Acting Founder
	// True means admins have this power, false means they don't
	// Default is false for clans, true for groups.
	InvitePermissionOverride bool `json:"invitePermissionOverride,omitempty"`

	// Level to join a member at when accepting an invite, application, or joining an open clan
	// Default is Beginner.
	JoinLevel GroupsV2RuntimeGroupMemberType `json:"joinLevel,omitempty"`

	// maximum members
	MaximumMembers int32 `json:"maximumMembers,omitempty"`

	// Maximum number of groups of this type a typical membership may join. For example, a user may join about 50 General groups with their Bungie.net account. They may join one clan per Destiny membership.
	MaximumMembershipsOfGroupType int32 `json:"maximumMembershipsOfGroupType,omitempty"`

	// membership types
	MembershipTypes []BungieMembershipType `json:"membershipTypes"`

	// Minimum Member Level allowed to update banner
	// Always Allowed: Founder, Acting Founder
	// True means admins have this power, false means they don't
	// Default is false for clans, true for groups.
	UpdateBannerPermissionOverride bool `json:"updateBannerPermissionOverride,omitempty"`

	// Minimum Member Level allowed to update group culture
	// Always Allowed: Founder, Acting Founder
	// True means admins have this power, false means they don't
	// Default is false for clans, true for groups.
	UpdateCulturePermissionOverride bool `json:"updateCulturePermissionOverride,omitempty"`
}

/* polymorph GroupsV2.GroupFeatures capabilities false */

/* polymorph GroupsV2.GroupFeatures hostGuidedGamePermissionOverride false */

/* polymorph GroupsV2.GroupFeatures invitePermissionOverride false */

/* polymorph GroupsV2.GroupFeatures joinLevel false */

/* polymorph GroupsV2.GroupFeatures maximumMembers false */

/* polymorph GroupsV2.GroupFeatures maximumMembershipsOfGroupType false */

/* polymorph GroupsV2.GroupFeatures membershipTypes false */

/* polymorph GroupsV2.GroupFeatures updateBannerPermissionOverride false */

/* polymorph GroupsV2.GroupFeatures updateCulturePermissionOverride false */

// Validate validates this groups v2 group features
func (m *GroupsV2GroupFeatures) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapabilities(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostGUIDEDGamePermissionOverride(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateJoinLevel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMembershipTypes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupsV2GroupFeatures) validateCapabilities(formats strfmt.Registry) error {

	if swag.IsZero(m.Capabilities) { // not required
		return nil
	}

	if err := m.Capabilities.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("capabilities")
		}
		return err
	}

	return nil
}

func (m *GroupsV2GroupFeatures) validateHostGUIDEDGamePermissionOverride(formats strfmt.Registry) error {

	if swag.IsZero(m.HostGUIDEDGamePermissionOverride) { // not required
		return nil
	}

	if err := m.HostGUIDEDGamePermissionOverride.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("hostGuidedGamePermissionOverride")
		}
		return err
	}

	return nil
}

func (m *GroupsV2GroupFeatures) validateJoinLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.JoinLevel) { // not required
		return nil
	}

	if err := m.JoinLevel.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("joinLevel")
		}
		return err
	}

	return nil
}

func (m *GroupsV2GroupFeatures) validateMembershipTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.MembershipTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.MembershipTypes); i++ {

		if err := m.MembershipTypes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("membershipTypes" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupsV2GroupFeatures) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupsV2GroupFeatures) UnmarshalBinary(b []byte) error {
	var res GroupsV2GroupFeatures
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
