// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyDamageTypeDefinition All damage types that are possible in the game are defined here, along with localized info and icons as needed.
// swagger:model Destiny.Definitions.DestinyDamageTypeDefinition

type DestinyDefinitionsDestinyDamageTypeDefinition struct {

	// The description of the damage type, icon etc...
	DisplayProperties *DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition `json:"displayProperties,omitempty"`

	// We have an enumeration for damage types for quick reference. This is the current definition's damage type enum value.
	EnumValue DestinyDamageType `json:"enumValue,omitempty"`

	// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
	// When entities refer to each other in Destiny content, it is this hash that they are referring to.
	Hash uint32 `json:"hash,omitempty"`

	// The index of the entity as it was found in the investment tables.
	Index int32 `json:"index,omitempty"`

	// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
	Redacted bool `json:"redacted,omitempty"`

	// If TRUE, the game shows this damage type's icon. Otherwise, it doesn't. Whether you show it or not is up to you.
	ShowIcon bool `json:"showIcon,omitempty"`

	// A variant of the icon that is transparent and colorless.
	TransparentIconPath string `json:"transparentIconPath,omitempty"`
}

/* polymorph Destiny.Definitions.DestinyDamageTypeDefinition displayProperties false */

/* polymorph Destiny.Definitions.DestinyDamageTypeDefinition enumValue false */

/* polymorph Destiny.Definitions.DestinyDamageTypeDefinition hash false */

/* polymorph Destiny.Definitions.DestinyDamageTypeDefinition index false */

/* polymorph Destiny.Definitions.DestinyDamageTypeDefinition redacted false */

/* polymorph Destiny.Definitions.DestinyDamageTypeDefinition showIcon false */

/* polymorph Destiny.Definitions.DestinyDamageTypeDefinition transparentIconPath false */

// Validate validates this destiny definitions destiny damage type definition
func (m *DestinyDefinitionsDestinyDamageTypeDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnumValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsDestinyDamageTypeDefinition) validateDisplayProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayProperties) { // not required
		return nil
	}

	if m.DisplayProperties != nil {

		if err := m.DisplayProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("displayProperties")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyDamageTypeDefinition) validateEnumValue(formats strfmt.Registry) error {

	if swag.IsZero(m.EnumValue) { // not required
		return nil
	}

	if err := m.EnumValue.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("enumValue")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyDamageTypeDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyDamageTypeDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyDamageTypeDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
