// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GroupsV2GroupV2 groups v2 group v2
// swagger:model GroupsV2.GroupV2

type GroupsV2GroupV2 struct {

	// about
	About string `json:"about,omitempty"`

	// allow chat
	AllowChat bool `json:"allowChat,omitempty"`

	// avatar image index
	AvatarImageIndex int32 `json:"avatarImageIndex,omitempty"`

	// avatar path
	AvatarPath string `json:"avatarPath,omitempty"`

	// ban expire date
	BanExpireDate strfmt.DateTime `json:"banExpireDate,omitempty"`

	// banner path
	BannerPath string `json:"bannerPath,omitempty"`

	// chat security
	ChatSecurity GroupsV2ChatSecuritySetting `json:"chatSecurity,omitempty"`

	// clan info
	ClanInfo *GroupsV2GroupV2ClanInfoAndInvestment `json:"clanInfo,omitempty"`

	// conversation Id
	ConversationID int64 `json:"conversationId,omitempty,string"`

	// creation date
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// default publicity
	DefaultPublicity GroupsV2GroupPostPublicity `json:"defaultPublicity,omitempty"`

	// enable invitation messaging for admins
	EnableInvitationMessagingForAdmins bool `json:"enableInvitationMessagingForAdmins,omitempty"`

	// features
	Features *GroupsV2GroupFeatures `json:"features,omitempty"`

	// group Id
	GroupID int64 `json:"groupId,omitempty,string"`

	// group type
	GroupType GroupsV2GroupType `json:"groupType,omitempty"`

	// homepage
	Homepage GroupsV2GroupHomepage `json:"homepage,omitempty"`

	// is alliance owner
	IsAllianceOwner bool `json:"isAllianceOwner,omitempty"`

	// is default post public
	IsDefaultPostPublic bool `json:"isDefaultPostPublic,omitempty"`

	// is public
	IsPublic bool `json:"isPublic,omitempty"`

	// is public topic admin only
	IsPublicTopicAdminOnly bool `json:"isPublicTopicAdminOnly,omitempty"`

	// locale
	Locale string `json:"locale,omitempty"`

	// member count
	MemberCount int32 `json:"memberCount,omitempty"`

	// membership Id created
	MembershipIDCreated int64 `json:"membershipIdCreated,omitempty,string"`

	// membership option
	MembershipOption GroupsV2MembershipOption `json:"membershipOption,omitempty"`

	// modification date
	ModificationDate strfmt.DateTime `json:"modificationDate,omitempty"`

	// motto
	Motto string `json:"motto,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// primary allied group Id
	PrimaryAlliedGroupID int64 `json:"primaryAlliedGroupId,omitempty,string"`

	// tags
	Tags []string `json:"tags"`

	// theme
	Theme string `json:"theme,omitempty"`
}

/* polymorph GroupsV2.GroupV2 about false */

/* polymorph GroupsV2.GroupV2 allowChat false */

/* polymorph GroupsV2.GroupV2 avatarImageIndex false */

/* polymorph GroupsV2.GroupV2 avatarPath false */

/* polymorph GroupsV2.GroupV2 banExpireDate false */

/* polymorph GroupsV2.GroupV2 bannerPath false */

/* polymorph GroupsV2.GroupV2 chatSecurity false */

/* polymorph GroupsV2.GroupV2 clanInfo false */

/* polymorph GroupsV2.GroupV2 conversationId false */

/* polymorph GroupsV2.GroupV2 creationDate false */

/* polymorph GroupsV2.GroupV2 defaultPublicity false */

/* polymorph GroupsV2.GroupV2 enableInvitationMessagingForAdmins false */

/* polymorph GroupsV2.GroupV2 features false */

/* polymorph GroupsV2.GroupV2 groupId false */

/* polymorph GroupsV2.GroupV2 groupType false */

/* polymorph GroupsV2.GroupV2 homepage false */

/* polymorph GroupsV2.GroupV2 isAllianceOwner false */

/* polymorph GroupsV2.GroupV2 isDefaultPostPublic false */

/* polymorph GroupsV2.GroupV2 isPublic false */

/* polymorph GroupsV2.GroupV2 isPublicTopicAdminOnly false */

/* polymorph GroupsV2.GroupV2 locale false */

/* polymorph GroupsV2.GroupV2 memberCount false */

/* polymorph GroupsV2.GroupV2 membershipIdCreated false */

/* polymorph GroupsV2.GroupV2 membershipOption false */

/* polymorph GroupsV2.GroupV2 modificationDate false */

/* polymorph GroupsV2.GroupV2 motto false */

/* polymorph GroupsV2.GroupV2 name false */

/* polymorph GroupsV2.GroupV2 primaryAlliedGroupId false */

/* polymorph GroupsV2.GroupV2 tags false */

/* polymorph GroupsV2.GroupV2 theme false */

// Validate validates this groups v2 group v2
func (m *GroupsV2GroupV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChatSecurity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateClanInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDefaultPublicity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHomepage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMembershipOption(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupsV2GroupV2) validateChatSecurity(formats strfmt.Registry) error {

	if swag.IsZero(m.ChatSecurity) { // not required
		return nil
	}

	if err := m.ChatSecurity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("chatSecurity")
		}
		return err
	}

	return nil
}

func (m *GroupsV2GroupV2) validateClanInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.ClanInfo) { // not required
		return nil
	}

	if m.ClanInfo != nil {

		if err := m.ClanInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clanInfo")
			}
			return err
		}
	}

	return nil
}

func (m *GroupsV2GroupV2) validateDefaultPublicity(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultPublicity) { // not required
		return nil
	}

	if err := m.DefaultPublicity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("defaultPublicity")
		}
		return err
	}

	return nil
}

func (m *GroupsV2GroupV2) validateFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Features) { // not required
		return nil
	}

	if m.Features != nil {

		if err := m.Features.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("features")
			}
			return err
		}
	}

	return nil
}

func (m *GroupsV2GroupV2) validateGroupType(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupType) { // not required
		return nil
	}

	if err := m.GroupType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("groupType")
		}
		return err
	}

	return nil
}

func (m *GroupsV2GroupV2) validateHomepage(formats strfmt.Registry) error {

	if swag.IsZero(m.Homepage) { // not required
		return nil
	}

	if err := m.Homepage.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("homepage")
		}
		return err
	}

	return nil
}

func (m *GroupsV2GroupV2) validateMembershipOption(formats strfmt.Registry) error {

	if swag.IsZero(m.MembershipOption) { // not required
		return nil
	}

	if err := m.MembershipOption.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("membershipOption")
		}
		return err
	}

	return nil
}

func (m *GroupsV2GroupV2) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupsV2GroupV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupsV2GroupV2) UnmarshalBinary(b []byte) error {
	var res GroupsV2GroupV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
