// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition The localized properties of the requirementsDisplay, allowing information about the requirement or item being featured to be seen.
// swagger:model Destiny.Definitions.DestinyVendorRequirementDisplayEntryDefinition

type DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition struct {

	// icon
	Icon string `json:"icon,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// source
	Source string `json:"source,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

/* polymorph Destiny.Definitions.DestinyVendorRequirementDisplayEntryDefinition icon false */

/* polymorph Destiny.Definitions.DestinyVendorRequirementDisplayEntryDefinition name false */

/* polymorph Destiny.Definitions.DestinyVendorRequirementDisplayEntryDefinition source false */

/* polymorph Destiny.Definitions.DestinyVendorRequirementDisplayEntryDefinition type false */

// Validate validates this destiny definitions destiny vendor requirement display entry definition
func (m *DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
