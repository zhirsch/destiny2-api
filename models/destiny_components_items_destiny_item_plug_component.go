// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyComponentsItemsDestinyItemPlugComponent Plugs are non-instanced items that can provide Stat and Perk benefits when socketed into an instanced item. Items have Sockets, and Plugs are inserted into Sockets.
// This component finds all items that are considered "Plugs" in your inventory, and return information about the plug aside from any specific Socket into which it could be inserted.
// swagger:model Destiny.Components.Items.DestinyItemPlugComponent

type DestinyComponentsItemsDestinyItemPlugComponent struct {

	// If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.
	// This list will be empty if the plug is enabled.
	EnableFailIndexes []int32 `json:"enableFailIndexes"`

	// If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.
	// This list will be empty if the plug can be inserted.
	InsertFailIndexes []int32 `json:"insertFailIndexes"`
}

/* polymorph Destiny.Components.Items.DestinyItemPlugComponent enableFailIndexes false */

/* polymorph Destiny.Components.Items.DestinyItemPlugComponent insertFailIndexes false */

// Validate validates this destiny components items destiny item plug component
func (m *DestinyComponentsItemsDestinyItemPlugComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnableFailIndexes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInsertFailIndexes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyComponentsItemsDestinyItemPlugComponent) validateEnableFailIndexes(formats strfmt.Registry) error {

	if swag.IsZero(m.EnableFailIndexes) { // not required
		return nil
	}

	return nil
}

func (m *DestinyComponentsItemsDestinyItemPlugComponent) validateInsertFailIndexes(formats strfmt.Registry) error {

	if swag.IsZero(m.InsertFailIndexes) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyComponentsItemsDestinyItemPlugComponent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyComponentsItemsDestinyItemPlugComponent) UnmarshalBinary(b []byte) error {
	var res DestinyComponentsItemsDestinyItemPlugComponent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
