// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyResponsesDestinyItemResponse The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
// swagger:model Destiny.Responses.DestinyItemResponse

type DestinyResponsesDestinyItemResponse struct {

	// If the item is on a character, this will return the ID of the character that is holding the item.
	CharacterID int64 `json:"characterId,omitempty"`

	// Basic instance data for the item.
	// COMPONENT TYPE: ItemInstances
	Instance *SingleComponentResponseOfDestinyItemInstanceComponent `json:"instance,omitempty"`

	// Common data for the item relevant to its non-instanced properties.
	// COMPONENT TYPE: ItemCommonData
	Item *SingleComponentResponseOfDestinyItemComponent `json:"item,omitempty"`

	// Information specifically about the item's objectives.
	// COMPONENT TYPE: ItemObjectives
	Objectives *SingleComponentResponseOfDestinyItemObjectivesComponent `json:"objectives,omitempty"`

	// Information specifically about the perks currently active on the item.
	// COMPONENT TYPE: ItemPerks
	Perks *SingleComponentResponseOfDestinyItemPerksComponent `json:"perks,omitempty"`

	// Information about how to render the item in 3D.
	// COMPONENT TYPE: ItemRenderData
	RenderData *SingleComponentResponseOfDestinyItemRenderComponent `json:"renderData,omitempty"`

	// Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them.
	// COMPONENT TYPE: ItemSockets
	Sockets *SingleComponentResponseOfDestinyItemSocketsComponent `json:"sockets,omitempty"`

	// Information about the computed stats of the item: power, defense, etc...
	// COMPONENT TYPE: ItemStats
	Stats *SingleComponentResponseOfDestinyItemStatsComponent `json:"stats,omitempty"`

	// Information about the talent grid attached to the item. Talent nodes can provide a variety of benefits and abilities, and in Destiny 2 are used almost exclusively for the character's "Builds".
	// COMPONENT TYPE: ItemTalentGrids
	TalentGrid *SingleComponentResponseOfDestinyItemTalentGridComponent `json:"talentGrid,omitempty"`
}

/* polymorph Destiny.Responses.DestinyItemResponse characterId false */

/* polymorph Destiny.Responses.DestinyItemResponse instance false */

/* polymorph Destiny.Responses.DestinyItemResponse item false */

/* polymorph Destiny.Responses.DestinyItemResponse objectives false */

/* polymorph Destiny.Responses.DestinyItemResponse perks false */

/* polymorph Destiny.Responses.DestinyItemResponse renderData false */

/* polymorph Destiny.Responses.DestinyItemResponse sockets false */

/* polymorph Destiny.Responses.DestinyItemResponse stats false */

/* polymorph Destiny.Responses.DestinyItemResponse talentGrid false */

// Validate validates this destiny responses destiny item response
func (m *DestinyResponsesDestinyItemResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstance(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateItem(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateObjectives(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePerks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRenderData(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSockets(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTalentGrid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyResponsesDestinyItemResponse) validateInstance(formats strfmt.Registry) error {

	if swag.IsZero(m.Instance) { // not required
		return nil
	}

	if m.Instance != nil {

		if err := m.Instance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instance")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyItemResponse) validateItem(formats strfmt.Registry) error {

	if swag.IsZero(m.Item) { // not required
		return nil
	}

	if m.Item != nil {

		if err := m.Item.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("item")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyItemResponse) validateObjectives(formats strfmt.Registry) error {

	if swag.IsZero(m.Objectives) { // not required
		return nil
	}

	if m.Objectives != nil {

		if err := m.Objectives.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectives")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyItemResponse) validatePerks(formats strfmt.Registry) error {

	if swag.IsZero(m.Perks) { // not required
		return nil
	}

	if m.Perks != nil {

		if err := m.Perks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perks")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyItemResponse) validateRenderData(formats strfmt.Registry) error {

	if swag.IsZero(m.RenderData) { // not required
		return nil
	}

	if m.RenderData != nil {

		if err := m.RenderData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renderData")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyItemResponse) validateSockets(formats strfmt.Registry) error {

	if swag.IsZero(m.Sockets) { // not required
		return nil
	}

	if m.Sockets != nil {

		if err := m.Sockets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sockets")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyItemResponse) validateStats(formats strfmt.Registry) error {

	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {

		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyResponsesDestinyItemResponse) validateTalentGrid(formats strfmt.Registry) error {

	if swag.IsZero(m.TalentGrid) { // not required
		return nil
	}

	if m.TalentGrid != nil {

		if err := m.TalentGrid.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("talentGrid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyResponsesDestinyItemResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyResponsesDestinyItemResponse) UnmarshalBinary(b []byte) error {
	var res DestinyResponsesDestinyItemResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
