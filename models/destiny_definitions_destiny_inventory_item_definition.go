// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyInventoryItemDefinition So much of what you see in Destiny is actually an Item used in a new and creative way. This is the definition for Items in Destiny, which started off as just entities that could exist in your Inventory but ended up being the backing data for so much more: quests, reward previews, slots, and subclasses.
// In practice, you will want to associate this data with "live" item data from a Bungie.Net Platform call: these definitions describe the item in generic, non-instanced terms: but an actual instance of an item can vary widely from these generic definitions.
// swagger:model Destiny.Definitions.DestinyInventoryItemDefinition

type DestinyDefinitionsDestinyInventoryItemDefinition struct {

	// If the item can be "used", this block will be non-null, and will have data related to the action performed when using the item. (Guess what? 99% of the time, this action is "dismantle". Shocker)
	Action *DestinyDefinitionsDestinyItemActionBlockDefinition `json:"action,omitempty"`

	// BNet may forbid the execution of actions on this item via the API. If that is occurring, allowActions will be set to false.
	AllowActions bool `json:"allowActions,omitempty"`

	// animations
	Animations DestinyDefinitionsDestinyInventoryItemDefinitionAnimations `json:"animations"`

	// We run a similarly weak-sauce algorithm to try and determine whether an item is restricted to a specific class. If we find it to be restricted in such a way, we set this classType property to match the class' enumeration value so that users can easily identify class restricted items.
	// If you see a mis-classed item, please inform the developers in the Bungie API forum.
	ClassType DestinyDestinyClass `json:"classType,omitempty"`

	// Theoretically, an item can have many possible damage types. In *practice*, this is not true, but just in case weapons start being made that have multiple (for instance, an item where a socket has reusable plugs for every possible damage type that you can choose from freely), this field will return all of the possible damage types that are available to the weapon by default.
	DamageTypeHashes []uint32 `json:"damageTypeHashes"`

	// This is the list of all damage types that we know ahead of time the item can take on. Unfortunately, this does not preclude the possibility of something funky happening to give the item a damage type that cannot be predicted beforehand: for example, if some designer decides to create arbitrary non-reusable plugs that cause damage type to change.
	// This damage type prediction will only use the following to determine potential damage types:
	// - Intrinsic perks
	// - Talent Node perks
	// - Known, reusable plugs for sockets
	DamageTypes []DestinyDamageType `json:"damageTypes"`

	// If the item has a damage type that could be considered to be default, it will be populated here.
	// For various upsetting reasons, it's surprisingly cumbersome to figure this out. I hope you're happy.
	DefaultDamageType DestinyDamageType `json:"defaultDamageType,omitempty"`

	// Similar to defaultDamageType, but represented as the hash identifier for a DestinyDamageTypeDefinition.
	// I will likely regret leaving in the enumeration versions of these properties, but for now they're very convenient.
	DefaultDamageTypeHash uint32 `json:"defaultDamageTypeHash,omitempty"`

	// display properties
	DisplayProperties *DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition `json:"displayProperties,omitempty"`

	// In theory, it is a localized string telling you about how you can find the item. I really wish this was more consistent. Many times, it has nothing. Sometimes, it's instead a more narrative-forward description of the item. Which is cool, and I wish all properties had that data, but it should really be its own property.
	DisplaySource string `json:"displaySource,omitempty"`

	// If true, then you will be allowed to equip the item if you pass its other requirements.
	// This being false means that you cannot equip the item under any circumstances.
	Equippable bool `json:"equippable,omitempty"`

	// If this item can be equipped, this block will be non-null and will be populated with the conditions under which it can be equipped.
	EquippingBlock *DestinyDefinitionsDestinyEquippingBlockDefinition `json:"equippingBlock,omitempty"`

	// If this item has related items in a "Gear Set", this will be non-null and the relationships defined herein.
	Gearset *DestinyDefinitionsDestinyItemGearsetBlockDefinition `json:"gearset,omitempty"`

	// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
	// When entities refer to each other in Destiny content, it is this hash that they are referring to.
	Hash uint32 `json:"hash,omitempty"`

	// The index of the entity as it was found in the investment tables.
	Index int32 `json:"index,omitempty"`

	// If this item can exist in an inventory, this block will be non-null. In practice, every item that currently exists has one of these blocks. But note that it is not necessarily guaranteed.
	Inventory *DestinyDefinitionsDestinyItemInventoryBlockDefinition `json:"inventory,omitempty"`

	// investment stats
	InvestmentStats DestinyDefinitionsDestinyInventoryItemDefinitionInvestmentStats `json:"investmentStats"`

	// BNet attempts to make a more formal definition of item "Categories", as defined by DestinyItemCategoryDefinition. This is a list of all Categories that we were able to algorithmically determine that this item is a member of. (for instance, that it's a "Weapon", that it's an "Auto Rifle", etc...)
	// The algorithm for these is, unfortunately, volatile. If you believe you see a miscategorized item, please let us know on the Bungie API forums.
	ItemCategoryHashes []uint32 `json:"itemCategoryHashes"`

	// A value indicating the "sub-type" of the item. For instance, where an item might have an itemType value "Weapon", this will be something more specific like "Auto Rifle".
	// itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.
	ItemSubType DestinyDestinyItemSubType `json:"itemSubType,omitempty"`

	// A value indicating the "base" the of the item. This enum is a useful but dramatic oversimplification of what it means for an item to have a "Type". Still, it's handy in many situations.
	// itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.
	ItemType DestinyDestinyItemType `json:"itemType,omitempty"`

	// It became a common enough pattern in our UI to show Item Type and Tier combined into a single localized string that I'm just going to go ahead and start pre-creating these for items.
	ItemTypeAndTierDisplayName string `json:"itemTypeAndTierDisplayName,omitempty"`

	// The localized title/name of the item's type. This can be whatever the designers want, and has no guarantee of consistency between items.
	ItemTypeDisplayName string `json:"itemTypeDisplayName,omitempty"`

	// links
	Links DestinyDefinitionsDestinyInventoryItemDefinitionLinks `json:"links"`

	// If the item has any related Lore (DestinyLoreDefinition), this will be the hash identifier you can use to look up the lore definition.
	LoreHash uint32 `json:"loreHash,omitempty"`

	// The intrinsic transferability of an item.
	// I hate that this boolean is negative - but there's a reason.
	// Just because an item is intrinsically transferrable doesn't mean that it can be transferred, and we don't want to imply that this is the only source of that transferability.
	NonTransferrable bool `json:"nonTransferrable,omitempty"`

	// If this item has Objectives (extra tasks that can be accomplished related to the item... most frequently when the item is a Quest Step and the Objectives need to be completed to move on to the next Quest Step), this block will be non-null and the objectives defined herein.
	Objectives *DestinyDefinitionsDestinyItemObjectiveBlockDefinition `json:"objectives,omitempty"`

	// perks
	Perks DestinyDefinitionsDestinyInventoryItemDefinitionPerks `json:"perks"`

	// If this item *is* a Plug, this will be non-null and the info defined herein. See DestinyItemPlugDefinition for more information.
	Plug *DestinyDefinitionsItemsDestinyItemPlugDefinition `json:"plug,omitempty"`

	// If this item can be Used or Acquired to gain other items (for instance, how Eververse Boxes can be consumed to get items from the box), this block will be non-null and will give summary information for the items that can be acquired.
	Preview *DestinyDefinitionsDestinyItemPreviewBlockDefinition `json:"preview,omitempty"`

	// If this item can have a level or stats, this block will be non-null and will be populated with default quality (item level, "quality", and infusion) data. See the block for more details, there's often less upfront information in D2 so you'll want to be aware of how you use quality and item level on the definition level now.
	Quality *DestinyDefinitionsDestinyItemQualityBlockDefinition `json:"quality,omitempty"`

	// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
	Redacted bool `json:"redacted,omitempty"`

	// If this item is a "reward sack" that can be opened to provide other items, this will be non-null and the properties of the sack contained herein.
	Sack *DestinyDefinitionsDestinyItemSackBlockDefinition `json:"sack,omitempty"`

	// If we were able to acquire an in-game screenshot for the item, the path to that screenshot will be returned here. Note that not all items have screenshots: particularly not any non-equippable items.
	Screenshot string `json:"screenshot,omitempty"`

	// A secondary icon associated with the item. Currently this is used in very context specific applications, such as Emblem Nameplates.
	SecondaryIcon string `json:"secondaryIcon,omitempty"`

	// Pulled from the secondary icon, this is the "secondary background" of the secondary icon. Confusing? Sure, that's why I call it "overlay" here: because as far as it's been used thus far, it has been for an optional overlay image. We'll see if that holds up, but at least for now it explains what this image is a bit better.
	SecondaryOverlay string `json:"secondaryOverlay,omitempty"`

	// Pulled from the Secondary Icon, this is the "special" background for the item. For Emblems, this is the background image used on the Details view: but it need not be limited to that for other types of items.
	SecondarySpecial string `json:"secondarySpecial,omitempty"`

	// If this item is a quest, this block will be non-null. In practice, I wish I had called this the Quest block, but at the time it wasn't clear to me whether it would end up being used for purposes other than quests. It will contain data about the steps in the quest, and mechanics we can use for displaying and tracking the quest.
	SetData *DestinyDefinitionsDestinyItemSetBlockDefinition `json:"setData,omitempty"`

	// If this item has any Sockets, this will be non-null and the individual sockets on the item will be defined herein.
	Sockets *DestinyDefinitionsDestinyItemSocketBlockDefinition `json:"sockets,omitempty"`

	// If this item has a known source, this block will be non-null and populated with source information. Unfortunately, at this time we are not generating sources: that is some aggressively manual work which we didn't have time for, and I'm hoping to get back to at some point in the future.
	SourceData *DestinyDefinitionsDestinyItemSourceBlockDefinition `json:"sourceData,omitempty"`

	// In Destiny 1, we identified some items as having particular categories that we'd like to know about for various internal logic purposes. These are defined in SpecialItemType, and while these days the itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.
	SpecialItemType DestinySpecialItemType `json:"specialItemType,omitempty"`

	// If this item can have stats (such as a weapon, armor, or vehicle), this block will be non-null and populated with the stats found on the item.
	Stats *DestinyDefinitionsDestinyItemStatBlockDefinition `json:"stats,omitempty"`

	// Summary data about the item.
	Summary *DestinyDefinitionsDestinyItemSummaryBlockDefinition `json:"summary,omitempty"`

	// There are times when the game will show you a "summary/vague" version of an item - such as a description of its type represented as a DestinyInventoryItemDefinition - rather than display the item itself.
	// This happens sometimes when summarizing possible rewards in a tooltip. This is the item displayed instead, if it exists.
	SummaryItemHash uint32 `json:"summaryItemHash,omitempty"`

	// If the item has a Talent Grid, this will be non-null and the properties of the grid defined herein. Note that, while many items still have talent grids, the only ones with meaningful Nodes still on them will be Subclass/"Build" items.
	TalentGrid *DestinyDefinitionsDestinyItemTalentGridBlockDefinition `json:"talentGrid,omitempty"`

	// An identifier that the game UI uses to determine what type of tooltip to show for the item. These have no corresponding definitions that BNet can link to: so it'll be up to you to interpret and display your UI differently according to these styles (or ignore it).
	TooltipStyle string `json:"tooltipStyle,omitempty"`

	// If this item can be rendered, this block will be non-null and will be populated with rendering information.
	TranslationBlock *DestinyDefinitionsDestinyItemTranslationBlockDefinition `json:"translationBlock,omitempty"`

	// The conceptual "Value" of an item, if any was defined. See the DestinyItemValueBlockDefinition for more details.
	Value *DestinyDefinitionsDestinyItemValueBlockDefinition `json:"value,omitempty"`
}

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition action false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition allowActions false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition animations false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition classType false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition damageTypeHashes false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition damageTypes false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition defaultDamageType false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition defaultDamageTypeHash false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition displayProperties false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition displaySource false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition equippable false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition equippingBlock false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition gearset false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition hash false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition index false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition inventory false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition investmentStats false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition itemCategoryHashes false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition itemSubType false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition itemType false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition itemTypeAndTierDisplayName false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition itemTypeDisplayName false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition links false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition loreHash false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition nonTransferrable false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition objectives false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition perks false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition plug false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition preview false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition quality false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition redacted false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition sack false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition screenshot false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition secondaryIcon false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition secondaryOverlay false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition secondarySpecial false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition setData false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition sockets false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition sourceData false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition specialItemType false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition stats false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition summary false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition summaryItemHash false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition talentGrid false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition tooltipStyle false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition translationBlock false */

/* polymorph Destiny.Definitions.DestinyInventoryItemDefinition value false */

// Validate validates this destiny definitions destiny inventory item definition
func (m *DestinyDefinitionsDestinyInventoryItemDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateClassType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDamageTypeHashes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDamageTypes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDefaultDamageType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEquippingBlock(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGearset(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInventory(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateItemCategoryHashes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateItemSubType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateItemType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateObjectives(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePlug(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePreview(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateQuality(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSack(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSetData(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSockets(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSourceData(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSpecialItemType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTalentGrid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTranslationBlock(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	if m.Action != nil {

		if err := m.Action.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateClassType(formats strfmt.Registry) error {

	if swag.IsZero(m.ClassType) { // not required
		return nil
	}

	if err := m.ClassType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("classType")
		}
		return err
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateDamageTypeHashes(formats strfmt.Registry) error {

	if swag.IsZero(m.DamageTypeHashes) { // not required
		return nil
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateDamageTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.DamageTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.DamageTypes); i++ {

		if err := m.DamageTypes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("damageTypes" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateDefaultDamageType(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultDamageType) { // not required
		return nil
	}

	if err := m.DefaultDamageType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("defaultDamageType")
		}
		return err
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateDisplayProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayProperties) { // not required
		return nil
	}

	if m.DisplayProperties != nil {

		if err := m.DisplayProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("displayProperties")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateEquippingBlock(formats strfmt.Registry) error {

	if swag.IsZero(m.EquippingBlock) { // not required
		return nil
	}

	if m.EquippingBlock != nil {

		if err := m.EquippingBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("equippingBlock")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateGearset(formats strfmt.Registry) error {

	if swag.IsZero(m.Gearset) { // not required
		return nil
	}

	if m.Gearset != nil {

		if err := m.Gearset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gearset")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateInventory(formats strfmt.Registry) error {

	if swag.IsZero(m.Inventory) { // not required
		return nil
	}

	if m.Inventory != nil {

		if err := m.Inventory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inventory")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateItemCategoryHashes(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemCategoryHashes) { // not required
		return nil
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateItemSubType(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemSubType) { // not required
		return nil
	}

	if err := m.ItemSubType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("itemSubType")
		}
		return err
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateItemType(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemType) { // not required
		return nil
	}

	if err := m.ItemType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("itemType")
		}
		return err
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateObjectives(formats strfmt.Registry) error {

	if swag.IsZero(m.Objectives) { // not required
		return nil
	}

	if m.Objectives != nil {

		if err := m.Objectives.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectives")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validatePlug(formats strfmt.Registry) error {

	if swag.IsZero(m.Plug) { // not required
		return nil
	}

	if m.Plug != nil {

		if err := m.Plug.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plug")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validatePreview(formats strfmt.Registry) error {

	if swag.IsZero(m.Preview) { // not required
		return nil
	}

	if m.Preview != nil {

		if err := m.Preview.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preview")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateQuality(formats strfmt.Registry) error {

	if swag.IsZero(m.Quality) { // not required
		return nil
	}

	if m.Quality != nil {

		if err := m.Quality.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quality")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateSack(formats strfmt.Registry) error {

	if swag.IsZero(m.Sack) { // not required
		return nil
	}

	if m.Sack != nil {

		if err := m.Sack.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sack")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateSetData(formats strfmt.Registry) error {

	if swag.IsZero(m.SetData) { // not required
		return nil
	}

	if m.SetData != nil {

		if err := m.SetData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setData")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateSockets(formats strfmt.Registry) error {

	if swag.IsZero(m.Sockets) { // not required
		return nil
	}

	if m.Sockets != nil {

		if err := m.Sockets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sockets")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateSourceData(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceData) { // not required
		return nil
	}

	if m.SourceData != nil {

		if err := m.SourceData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceData")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateSpecialItemType(formats strfmt.Registry) error {

	if swag.IsZero(m.SpecialItemType) { // not required
		return nil
	}

	if err := m.SpecialItemType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("specialItemType")
		}
		return err
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateStats(formats strfmt.Registry) error {

	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {

		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateSummary(formats strfmt.Registry) error {

	if swag.IsZero(m.Summary) { // not required
		return nil
	}

	if m.Summary != nil {

		if err := m.Summary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summary")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateTalentGrid(formats strfmt.Registry) error {

	if swag.IsZero(m.TalentGrid) { // not required
		return nil
	}

	if m.TalentGrid != nil {

		if err := m.TalentGrid.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("talentGrid")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateTranslationBlock(formats strfmt.Registry) error {

	if swag.IsZero(m.TranslationBlock) { // not required
		return nil
	}

	if m.TranslationBlock != nil {

		if err := m.TranslationBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("translationBlock")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsDestinyInventoryItemDefinition) validateValue(formats strfmt.Registry) error {

	if swag.IsZero(m.Value) { // not required
		return nil
	}

	if m.Value != nil {

		if err := m.Value.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("value")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyInventoryItemDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyInventoryItemDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyInventoryItemDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
