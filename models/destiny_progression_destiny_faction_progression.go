// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyProgressionDestinyFactionProgression Mostly for historical purposes, we segregate Faction progressions from other progressions. This is just a DestinyProgression with a shortcut for finding the DestinyFactionDefinition of the faction related to the progression.
// swagger:model Destiny.Progression.DestinyFactionProgression

type DestinyProgressionDestinyFactionProgression struct {

	// This is the total amount of progress obtained overall for this progression (for instance, the total amount of Character Level experience earned)
	CurrentProgress int32 `json:"currentProgress,omitempty"`

	// If this progression has a daily limit, this is that limit.
	DailyLimit int32 `json:"dailyLimit,omitempty"`

	// The amount of progress earned today for this progression.
	DailyProgress int32 `json:"dailyProgress,omitempty"`

	// The hash identifier of the Faction related to this progression. Use it to look up the DestinyFactionDefinition for more rendering info.
	FactionHash uint32 `json:"factionHash,omitempty"`

	// This is the level of the progression (for instance, the Character Level).
	Level int32 `json:"level,omitempty"`

	// This is the maximum possible level you can achieve for this progression (for example, the maximum character level obtainable)
	LevelCap int32 `json:"levelCap,omitempty"`

	// The total amount of progression (i.e. "Experience") needed in order to reach the next level.
	NextLevelAt int32 `json:"nextLevelAt,omitempty"`

	// The amount of progression (i.e. "Experience") needed to reach the next level of this Progression. Jeez, progression is such an overloaded word.
	ProgressToNextLevel int32 `json:"progressToNextLevel,omitempty"`

	// The hash identifier of the Progression in question. Use it to look up the DestinyProgressionDefinition in static data.
	ProgressionHash uint32 `json:"progressionHash,omitempty"`

	// Progressions define their levels in "steps". Since the last step may be repeatable, the user may be at a higher level than the actual Step achieved in the progression. Not necessarily useful, but potentially interesting for those cruising the API. Relate this to the "steps" property of the DestinyProgression to see which step the user is on, if you care about that. (Note that this is Content Version dependent since it refers to indexes.)
	StepIndex int32 `json:"stepIndex,omitempty"`

	// If this progression has a weekly limit, this is that limit.
	WeeklyLimit int32 `json:"weeklyLimit,omitempty"`

	// The amount of progress earned toward this progression in the current week.
	WeeklyProgress int32 `json:"weeklyProgress,omitempty"`
}

/* polymorph Destiny.Progression.DestinyFactionProgression currentProgress false */

/* polymorph Destiny.Progression.DestinyFactionProgression dailyLimit false */

/* polymorph Destiny.Progression.DestinyFactionProgression dailyProgress false */

/* polymorph Destiny.Progression.DestinyFactionProgression factionHash false */

/* polymorph Destiny.Progression.DestinyFactionProgression level false */

/* polymorph Destiny.Progression.DestinyFactionProgression levelCap false */

/* polymorph Destiny.Progression.DestinyFactionProgression nextLevelAt false */

/* polymorph Destiny.Progression.DestinyFactionProgression progressToNextLevel false */

/* polymorph Destiny.Progression.DestinyFactionProgression progressionHash false */

/* polymorph Destiny.Progression.DestinyFactionProgression stepIndex false */

/* polymorph Destiny.Progression.DestinyFactionProgression weeklyLimit false */

/* polymorph Destiny.Progression.DestinyFactionProgression weeklyProgress false */

// Validate validates this destiny progression destiny faction progression
func (m *DestinyProgressionDestinyFactionProgression) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DestinyProgressionDestinyFactionProgression) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyProgressionDestinyFactionProgression) UnmarshalBinary(b []byte) error {
	var res DestinyProgressionDestinyFactionProgression
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
