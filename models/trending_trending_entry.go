// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TrendingTrendingEntry The list entry view for trending items. Returns just enough to show the item on the trending page.
// swagger:model Trending.TrendingEntry

type TrendingTrendingEntry struct {

	// The localized "display name/article title/'primary localized identifier'" of the entity.
	DisplayName string `json:"displayName,omitempty"`

	// end date
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// An enum - unfortunately - dictating all of the possible kinds of trending items that you might get in your result set, in case you want to do custom rendering or call to get the details of the item.
	EntityType TrendingTrendingEntryType `json:"entityType,omitempty"`

	// If isFeatured, this image will be populated with whatever the featured image is. Note that this will likely be a very large image, so don't use it all the time.
	FeatureImage string `json:"featureImage,omitempty"`

	// We don't know whether the identifier will be a string, a uint, or a long... so we're going to cast it all to a string. But either way, we need any trending item created to have a single unique identifier for its type.
	Identifier string `json:"identifier,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// is featured
	IsFeatured bool `json:"isFeatured,omitempty"`

	// link
	Link string `json:"link,omitempty"`

	// If this is populated, the entry has a related MP4 video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo
	Mp4Video string `json:"mp4Video,omitempty"`

	// start date
	StartDate strfmt.DateTime `json:"startDate,omitempty"`

	// If the entity has a localized tagline/subtitle/motto/whatever, that is found here.
	Tagline string `json:"tagline,omitempty"`

	// If this is populated, the entry has a related WebM video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo
	WebmVideo string `json:"webmVideo,omitempty"`

	// The weighted score of this trending item.
	Weight float64 `json:"weight,omitempty"`
}

/* polymorph Trending.TrendingEntry displayName false */

/* polymorph Trending.TrendingEntry endDate false */

/* polymorph Trending.TrendingEntry entityType false */

/* polymorph Trending.TrendingEntry featureImage false */

/* polymorph Trending.TrendingEntry identifier false */

/* polymorph Trending.TrendingEntry image false */

/* polymorph Trending.TrendingEntry isFeatured false */

/* polymorph Trending.TrendingEntry link false */

/* polymorph Trending.TrendingEntry mp4Video false */

/* polymorph Trending.TrendingEntry startDate false */

/* polymorph Trending.TrendingEntry tagline false */

/* polymorph Trending.TrendingEntry webmVideo false */

/* polymorph Trending.TrendingEntry weight false */

// Validate validates this trending trending entry
func (m *TrendingTrendingEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrendingTrendingEntry) validateEntityType(formats strfmt.Registry) error {

	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	if err := m.EntityType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("entityType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrendingTrendingEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrendingTrendingEntry) UnmarshalBinary(b []byte) error {
	var res TrendingTrendingEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
