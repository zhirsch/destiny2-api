// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyProgressionRewardDefinition Inventory Items can reward progression when actions are performed on them. A common example of this in Destiny 1 was Bounties, which would reward Experience on your Character and the like when you completed the bounty.
// Note that this maps to a DestinyProgressionMappingDefinition, and *not* a DestinyProgressionDefinition directly. This is apparently so that multiple progressions can be granted progression points/experience at the same time.
// swagger:model Destiny.Definitions.DestinyProgressionRewardDefinition

type DestinyDefinitionsDestinyProgressionRewardDefinition struct {

	// The amount of experience to give to each of the mapped progressions.
	Amount int32 `json:"amount,omitempty"`

	// If true, the game's internal mechanisms to throttle progression should be applied.
	ApplyThrottles bool `json:"applyThrottles,omitempty"`

	// The hash identifier of the DestinyProgressionMappingDefinition that contains the progressions for which experience should be applied.
	ProgressionMappingHash uint32 `json:"progressionMappingHash,omitempty"`
}

/* polymorph Destiny.Definitions.DestinyProgressionRewardDefinition amount false */

/* polymorph Destiny.Definitions.DestinyProgressionRewardDefinition applyThrottles false */

/* polymorph Destiny.Definitions.DestinyProgressionRewardDefinition progressionMappingHash false */

// Validate validates this destiny definitions destiny progression reward definition
func (m *DestinyDefinitionsDestinyProgressionRewardDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyProgressionRewardDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyProgressionRewardDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyProgressionRewardDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
