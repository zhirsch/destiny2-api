// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyNodeSocketReplaceResponse This is a bit of an odd duck. Apparently, if talent nodes steps have this data, the game will go through on step activation and alter the first Socket it finds on the item that has a type matching the given socket type, inserting the indicated plug item.
// swagger:model Destiny.Definitions.DestinyNodeSocketReplaceResponse

type DestinyDefinitionsDestinyNodeSocketReplaceResponse struct {

	// The hash identifier of the plug item that will be inserted into the socket found.
	PlugItemHash uint32 `json:"plugItemHash,omitempty"`

	// The hash identifier of the socket type to find amidst the item's sockets (the item to which this talent grid is attached). See DestinyInventoryItemDefinition.sockets.socketEntries to find the socket type of sockets on the item in question.
	SocketTypeHash uint32 `json:"socketTypeHash,omitempty"`
}

/* polymorph Destiny.Definitions.DestinyNodeSocketReplaceResponse plugItemHash false */

/* polymorph Destiny.Definitions.DestinyNodeSocketReplaceResponse socketTypeHash false */

// Validate validates this destiny definitions destiny node socket replace response
func (m *DestinyDefinitionsDestinyNodeSocketReplaceResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyNodeSocketReplaceResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyNodeSocketReplaceResponse) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyNodeSocketReplaceResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
