// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyEntitiesItemsDestinyItemComponent The base item component, filled with properties that are generally useful to know in any item request or that don't feel worthwhile to put in their own component.
// swagger:model Destiny.Entities.Items.DestinyItemComponent

type DestinyEntitiesItemsDestinyItemComponent struct {

	// If the item is bound to a location, it will be specified in this enum.
	BindStatus DestinyItemBindStatus `json:"bindStatus,omitempty"`

	// The hash identifier for the specific inventory bucket in which the item is located.
	BucketHash uint32 `json:"bucketHash,omitempty"`

	// The identifier for the item's definition, which is where most of the useful static information for the item can be found.
	ItemHash uint32 `json:"itemHash,omitempty"`

	// If the item is instanced, it will have an instance ID. Lack of an instance ID implies that the item has no distinct local qualities aside from stack size.
	ItemInstanceID int64 `json:"itemInstanceId,omitempty,string"`

	// An easy reference for where the item is located. Redundant if you got the item from an Inventory, but useful when making detail calls on specific items.
	Location DestinyItemLocation `json:"location,omitempty"`

	// If the item can be locked, this will indicate that state.
	Lockable bool `json:"lockable,omitempty"`

	// The quantity of the item in this stack. Note that Instanced items cannot stack. If an instanced item, this value will always be 1 (as the stack has exactly one item in it)
	Quantity int32 `json:"quantity,omitempty"`

	// A flags enumeration indicating the states of the item: whether it's tracked or locked for example.
	State DestinyItemState `json:"state,omitempty"`

	// If there is a known error state that would cause this item to not be transferable, this Flags enum will indicate all of those error states. Otherwise, it will be 0 (CanTransfer).
	TransferStatus DestinyTransferStatuses `json:"transferStatus,omitempty"`
}

/* polymorph Destiny.Entities.Items.DestinyItemComponent bindStatus false */

/* polymorph Destiny.Entities.Items.DestinyItemComponent bucketHash false */

/* polymorph Destiny.Entities.Items.DestinyItemComponent itemHash false */

/* polymorph Destiny.Entities.Items.DestinyItemComponent itemInstanceId false */

/* polymorph Destiny.Entities.Items.DestinyItemComponent location false */

/* polymorph Destiny.Entities.Items.DestinyItemComponent lockable false */

/* polymorph Destiny.Entities.Items.DestinyItemComponent quantity false */

/* polymorph Destiny.Entities.Items.DestinyItemComponent state false */

/* polymorph Destiny.Entities.Items.DestinyItemComponent transferStatus false */

// Validate validates this destiny entities items destiny item component
func (m *DestinyEntitiesItemsDestinyItemComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBindStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransferStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyEntitiesItemsDestinyItemComponent) validateBindStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.BindStatus) { // not required
		return nil
	}

	if err := m.BindStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("bindStatus")
		}
		return err
	}

	return nil
}

func (m *DestinyEntitiesItemsDestinyItemComponent) validateLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if err := m.Location.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("location")
		}
		return err
	}

	return nil
}

func (m *DestinyEntitiesItemsDestinyItemComponent) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

func (m *DestinyEntitiesItemsDestinyItemComponent) validateTransferStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.TransferStatus) { // not required
		return nil
	}

	if err := m.TransferStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("transferStatus")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyEntitiesItemsDestinyItemComponent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyEntitiesItemsDestinyItemComponent) UnmarshalBinary(b []byte) error {
	var res DestinyEntitiesItemsDestinyItemComponent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
