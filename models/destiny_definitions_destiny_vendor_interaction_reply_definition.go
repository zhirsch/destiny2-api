// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyVendorInteractionReplyDefinition When the interaction is replied to, Reward sites will fire and items potentially selected based on whether the given unlock expression is TRUE.
// You can potentially choose one from multiple replies when replying to an interaction: this is how you get either/or rewards from vendors.
// swagger:model Destiny.Definitions.DestinyVendorInteractionReplyDefinition

type DestinyDefinitionsDestinyVendorInteractionReplyDefinition struct {

	// The rewards granted upon responding to the vendor.
	ItemRewardsSelection DestinyDestinyVendorInteractionRewardSelection `json:"itemRewardsSelection,omitempty"`

	// The localized text for the reply.
	Reply string `json:"reply,omitempty"`

	// An enum indicating the type of reply being made.
	ReplyType DestinyDestinyVendorReplyType `json:"replyType,omitempty"`
}

/* polymorph Destiny.Definitions.DestinyVendorInteractionReplyDefinition itemRewardsSelection false */

/* polymorph Destiny.Definitions.DestinyVendorInteractionReplyDefinition reply false */

/* polymorph Destiny.Definitions.DestinyVendorInteractionReplyDefinition replyType false */

// Validate validates this destiny definitions destiny vendor interaction reply definition
func (m *DestinyDefinitionsDestinyVendorInteractionReplyDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItemRewardsSelection(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReplyType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsDestinyVendorInteractionReplyDefinition) validateItemRewardsSelection(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemRewardsSelection) { // not required
		return nil
	}

	if err := m.ItemRewardsSelection.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("itemRewardsSelection")
		}
		return err
	}

	return nil
}

func (m *DestinyDefinitionsDestinyVendorInteractionReplyDefinition) validateReplyType(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplyType) { // not required
		return nil
	}

	if err := m.ReplyType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("replyType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyVendorInteractionReplyDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyVendorInteractionReplyDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyVendorInteractionReplyDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
