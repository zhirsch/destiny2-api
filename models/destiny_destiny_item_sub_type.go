// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// DestinyDestinyItemSubType This Enumeration further classifies items by more specific categorizations than DestinyItemType. The "Sub-Type" is where we classify and categorize items one step further in specificity: "Auto Rifle" instead of just "Weapon" for example, or "Vanguard Bounty" instead of merely "Bounty".
// These sub-types are provided for historical compatibility with Destiny 1, but an ideal alternative is to use DestinyItemCategoryDefinitions and the DestinyItemDefinition.itemCategories property instead. Item Categories allow for arbitrary hierarchies of specificity, and for items to belong to multiple categories across multiple hierarchies simultaneously. For this enum, we pick a single type as a "best guess" fit.
// NOTE: This is not all of the item types available, and some of these are holdovers from Destiny 1 that may or may not still exist.
// swagger:model Destiny.DestinyItemSubType

type DestinyDestinyItemSubType int32

// for schema
var destinyDestinyItemSubTypeEnum []interface{}

func init() {
	var res []DestinyDestinyItemSubType
	if err := json.Unmarshal([]byte(`[0,1,2,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		destinyDestinyItemSubTypeEnum = append(destinyDestinyItemSubTypeEnum, v)
	}
}

func (m DestinyDestinyItemSubType) validateDestinyDestinyItemSubTypeEnum(path, location string, value DestinyDestinyItemSubType) error {
	if err := validate.Enum(path, location, value, destinyDestinyItemSubTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this destiny destiny item sub type
func (m DestinyDestinyItemSubType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDestinyDestinyItemSubTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
