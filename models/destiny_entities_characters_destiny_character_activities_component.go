// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DestinyEntitiesCharactersDestinyCharacterActivitiesComponent This component holds activity data for a character. It will tell you about the character's current activity status, as well as activities that are available to the user.
// swagger:model Destiny.Entities.Characters.DestinyCharacterActivitiesComponent

type DestinyEntitiesCharactersDestinyCharacterActivitiesComponent struct {

	// available activities
	AvailableActivities DestinyEntitiesCharactersDestinyCharacterActivitiesComponentAvailableActivities `json:"availableActivities"`

	// If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP "Activities" are just maps: it's the ActivityMode that determines what type of PVP game they're playing.
	CurrentActivityHash uint32 `json:"currentActivityHash,omitempty"`

	// If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.
	CurrentActivityModeHash uint32 `json:"currentActivityModeHash,omitempty"`

	// current activity mode hashes
	CurrentActivityModeHashes []uint32 `json:"currentActivityModeHashes"`

	// current activity mode type
	CurrentActivityModeType int32 `json:"currentActivityModeType,omitempty"`

	// current activity mode types
	CurrentActivityModeTypes []DestinyHistoricalStatsDefinitionsDestinyActivityModeType `json:"currentActivityModeTypes"`

	// current playlist activity hash
	CurrentPlaylistActivityHash uint32 `json:"currentPlaylistActivityHash,omitempty"`

	// The last date that the user started playing an activity.
	DateActivityStarted strfmt.DateTime `json:"dateActivityStarted,omitempty"`

	// This will have the activity hash of the last completed story/campaign mission, in case you care about that.
	LastCompletedStoryHash uint32 `json:"lastCompletedStoryHash,omitempty"`
}

/* polymorph Destiny.Entities.Characters.DestinyCharacterActivitiesComponent availableActivities false */

/* polymorph Destiny.Entities.Characters.DestinyCharacterActivitiesComponent currentActivityHash false */

/* polymorph Destiny.Entities.Characters.DestinyCharacterActivitiesComponent currentActivityModeHash false */

/* polymorph Destiny.Entities.Characters.DestinyCharacterActivitiesComponent currentActivityModeHashes false */

/* polymorph Destiny.Entities.Characters.DestinyCharacterActivitiesComponent currentActivityModeType false */

/* polymorph Destiny.Entities.Characters.DestinyCharacterActivitiesComponent currentActivityModeTypes false */

/* polymorph Destiny.Entities.Characters.DestinyCharacterActivitiesComponent currentPlaylistActivityHash false */

/* polymorph Destiny.Entities.Characters.DestinyCharacterActivitiesComponent dateActivityStarted false */

/* polymorph Destiny.Entities.Characters.DestinyCharacterActivitiesComponent lastCompletedStoryHash false */

// Validate validates this destiny entities characters destiny character activities component
func (m *DestinyEntitiesCharactersDestinyCharacterActivitiesComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentActivityModeHashes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurrentActivityModeType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurrentActivityModeTypes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyEntitiesCharactersDestinyCharacterActivitiesComponent) validateCurrentActivityModeHashes(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentActivityModeHashes) { // not required
		return nil
	}

	return nil
}

var destinyEntitiesCharactersDestinyCharacterActivitiesComponentTypeCurrentActivityModeTypePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,2,3,4,5,6,7,9,10,11,12,13,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,37,38,39,40]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		destinyEntitiesCharactersDestinyCharacterActivitiesComponentTypeCurrentActivityModeTypePropEnum = append(destinyEntitiesCharactersDestinyCharacterActivitiesComponentTypeCurrentActivityModeTypePropEnum, v)
	}
}

// prop value enum
func (m *DestinyEntitiesCharactersDestinyCharacterActivitiesComponent) validateCurrentActivityModeTypeEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, destinyEntitiesCharactersDestinyCharacterActivitiesComponentTypeCurrentActivityModeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DestinyEntitiesCharactersDestinyCharacterActivitiesComponent) validateCurrentActivityModeType(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentActivityModeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrentActivityModeTypeEnum("currentActivityModeType", "body", m.CurrentActivityModeType); err != nil {
		return err
	}

	return nil
}

func (m *DestinyEntitiesCharactersDestinyCharacterActivitiesComponent) validateCurrentActivityModeTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentActivityModeTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.CurrentActivityModeTypes); i++ {

		if err := m.CurrentActivityModeTypes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentActivityModeTypes" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyEntitiesCharactersDestinyCharacterActivitiesComponent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyEntitiesCharactersDestinyCharacterActivitiesComponent) UnmarshalBinary(b []byte) error {
	var res DestinyEntitiesCharactersDestinyCharacterActivitiesComponent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
