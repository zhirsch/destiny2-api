// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition destiny historical stats definitions destiny historical stats definition
// swagger:model Destiny.HistoricalStats.Definitions.DestinyHistoricalStatsDefinition

type DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition struct {

	// Category for the stat.
	Category DestinyHistoricalStatsDefinitionsDestinyStatsCategoryType `json:"category,omitempty"`

	// Statistic group
	Group DestinyHistoricalStatsDefinitionsDestinyStatsGroupType `json:"group,omitempty"`

	// Optional URI to an icon for the statistic
	IconImage string `json:"iconImage,omitempty"`

	// The tier associated with this medal - be it implicitly or explicitly.
	MedalTierHash uint32 `json:"medalTierHash,omitempty"`

	// Optional icon for the statistic
	MergeMethod int32 `json:"mergeMethod,omitempty"`

	// Game modes where this statistic can be reported.
	Modes []DestinyHistoricalStatsDefinitionsDestinyActivityModeType `json:"modes"`

	// Time periods the statistic covers
	PeriodTypes []DestinyHistoricalStatsDefinitionsPeriodType `json:"periodTypes"`

	// Description of a stat if applicable.
	StatDescription string `json:"statDescription,omitempty"`

	// Unique programmer friendly ID for this stat
	StatID string `json:"statId,omitempty"`

	// Display name
	StatName string `json:"statName,omitempty"`

	// Localized Unit Name for the stat.
	UnitLabel string `json:"unitLabel,omitempty"`

	// Unit, if any, for the statistic
	UnitType DestinyHistoricalStatsDefinitionsUnitType `json:"unitType,omitempty"`

	// Weight assigned to this stat indicating its relative impressiveness.
	Weight int32 `json:"weight,omitempty"`
}

/* polymorph Destiny.HistoricalStats.Definitions.DestinyHistoricalStatsDefinition category false */

/* polymorph Destiny.HistoricalStats.Definitions.DestinyHistoricalStatsDefinition group false */

/* polymorph Destiny.HistoricalStats.Definitions.DestinyHistoricalStatsDefinition iconImage false */

/* polymorph Destiny.HistoricalStats.Definitions.DestinyHistoricalStatsDefinition medalTierHash false */

/* polymorph Destiny.HistoricalStats.Definitions.DestinyHistoricalStatsDefinition mergeMethod false */

/* polymorph Destiny.HistoricalStats.Definitions.DestinyHistoricalStatsDefinition modes false */

/* polymorph Destiny.HistoricalStats.Definitions.DestinyHistoricalStatsDefinition periodTypes false */

/* polymorph Destiny.HistoricalStats.Definitions.DestinyHistoricalStatsDefinition statDescription false */

/* polymorph Destiny.HistoricalStats.Definitions.DestinyHistoricalStatsDefinition statId false */

/* polymorph Destiny.HistoricalStats.Definitions.DestinyHistoricalStatsDefinition statName false */

/* polymorph Destiny.HistoricalStats.Definitions.DestinyHistoricalStatsDefinition unitLabel false */

/* polymorph Destiny.HistoricalStats.Definitions.DestinyHistoricalStatsDefinition unitType false */

/* polymorph Destiny.HistoricalStats.Definitions.DestinyHistoricalStatsDefinition weight false */

// Validate validates this destiny historical stats definitions destiny historical stats definition
func (m *DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMergeMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateModes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeriodTypes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUnitType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition) validateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if err := m.Category.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("category")
		}
		return err
	}

	return nil
}

func (m *DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition) validateGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.Group) { // not required
		return nil
	}

	if err := m.Group.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("group")
		}
		return err
	}

	return nil
}

var destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionTypeMergeMethodPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionTypeMergeMethodPropEnum = append(destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionTypeMergeMethodPropEnum, v)
	}
}

// prop value enum
func (m *DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition) validateMergeMethodEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionTypeMergeMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition) validateMergeMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.MergeMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateMergeMethodEnum("mergeMethod", "body", m.MergeMethod); err != nil {
		return err
	}

	return nil
}

func (m *DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition) validateModes(formats strfmt.Registry) error {

	if swag.IsZero(m.Modes) { // not required
		return nil
	}

	for i := 0; i < len(m.Modes); i++ {

		if err := m.Modes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modes" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition) validatePeriodTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.PeriodTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.PeriodTypes); i++ {

		if err := m.PeriodTypes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("periodTypes" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition) validateUnitType(formats strfmt.Registry) error {

	if swag.IsZero(m.UnitType) { // not required
		return nil
	}

	if err := m.UnitType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("unitType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
