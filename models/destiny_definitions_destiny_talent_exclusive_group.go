// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyTalentExclusiveGroup As of Destiny 2, nodes can exist as part of "Exclusive Groups". These differ from exclusive sets in that, within the group, many nodes can be activated. But the act of activating any node in the group will cause "opposing" nodes (nodes in groups that are not allowed to be activated at the same time as this group) to deactivate.
// swagger:model Destiny.Definitions.DestinyTalentExclusiveGroup

type DestinyDefinitionsDestinyTalentExclusiveGroup struct {

	// The identifier for this exclusive group. Only guaranteed unique within the talent grid, not globally.
	GroupHash uint32 `json:"groupHash,omitempty"`

	// If this group has an associated piece of lore to show next to it, this will be the identifier for that DestinyLoreDefinition.
	LoreHash uint32 `json:"loreHash,omitempty"`

	// A quick reference of the talent nodes that are part of this group, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)
	NodeHashes []uint32 `json:"nodeHashes"`

	// A quick reference of Groups whose nodes will be deactivated if any node in this group is activated.
	OpposingGroupHashes []uint32 `json:"opposingGroupHashes"`

	// A quick reference of Nodes that will be deactivated if any node in this group is activated, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)
	OpposingNodeHashes []uint32 `json:"opposingNodeHashes"`
}

/* polymorph Destiny.Definitions.DestinyTalentExclusiveGroup groupHash false */

/* polymorph Destiny.Definitions.DestinyTalentExclusiveGroup loreHash false */

/* polymorph Destiny.Definitions.DestinyTalentExclusiveGroup nodeHashes false */

/* polymorph Destiny.Definitions.DestinyTalentExclusiveGroup opposingGroupHashes false */

/* polymorph Destiny.Definitions.DestinyTalentExclusiveGroup opposingNodeHashes false */

// Validate validates this destiny definitions destiny talent exclusive group
func (m *DestinyDefinitionsDestinyTalentExclusiveGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeHashes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOpposingGroupHashes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOpposingNodeHashes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsDestinyTalentExclusiveGroup) validateNodeHashes(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeHashes) { // not required
		return nil
	}

	return nil
}

func (m *DestinyDefinitionsDestinyTalentExclusiveGroup) validateOpposingGroupHashes(formats strfmt.Registry) error {

	if swag.IsZero(m.OpposingGroupHashes) { // not required
		return nil
	}

	return nil
}

func (m *DestinyDefinitionsDestinyTalentExclusiveGroup) validateOpposingNodeHashes(formats strfmt.Registry) error {

	if swag.IsZero(m.OpposingNodeHashes) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyTalentExclusiveGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyTalentExclusiveGroup) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyTalentExclusiveGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
