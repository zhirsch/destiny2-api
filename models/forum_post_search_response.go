// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ForumPostSearchResponse forum post search response
// swagger:model Forum.PostSearchResponse

type ForumPostSearchResponse struct {

	// authors
	Authors ForumPostSearchResponseAuthors `json:"authors"`

	// available pages
	AvailablePages int32 `json:"availablePages,omitempty"`

	// groups
	Groups ForumPostSearchResponseGroups `json:"groups"`

	// has more
	HasMore bool `json:"hasMore,omitempty"`

	// polls
	Polls ForumPostSearchResponsePolls `json:"polls"`

	// query
	Query *QueriesPagedQuery `json:"query,omitempty"`

	// recruitment details
	RecruitmentDetails ForumPostSearchResponseRecruitmentDetails `json:"recruitmentDetails"`

	// related posts
	RelatedPosts ForumPostSearchResponseRelatedPosts `json:"relatedPosts"`

	// replacement continuation token
	ReplacementContinuationToken string `json:"replacementContinuationToken,omitempty"`

	// results
	Results ForumPostSearchResponseResults `json:"results"`

	// searched tags
	SearchedTags ForumPostSearchResponseSearchedTags `json:"searchedTags"`

	// total results
	TotalResults int32 `json:"totalResults,omitempty"`

	// If useTotalResults is true, then totalResults represents an accurate count.
	// If False, it does not, and may be estimated/only the size of the current page.
	// Either way, you should probably always only trust hasMore.
	// This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
	UseTotalResults bool `json:"useTotalResults,omitempty"`
}

/* polymorph Forum.PostSearchResponse authors false */

/* polymorph Forum.PostSearchResponse availablePages false */

/* polymorph Forum.PostSearchResponse groups false */

/* polymorph Forum.PostSearchResponse hasMore false */

/* polymorph Forum.PostSearchResponse polls false */

/* polymorph Forum.PostSearchResponse query false */

/* polymorph Forum.PostSearchResponse recruitmentDetails false */

/* polymorph Forum.PostSearchResponse relatedPosts false */

/* polymorph Forum.PostSearchResponse replacementContinuationToken false */

/* polymorph Forum.PostSearchResponse results false */

/* polymorph Forum.PostSearchResponse searchedTags false */

/* polymorph Forum.PostSearchResponse totalResults false */

/* polymorph Forum.PostSearchResponse useTotalResults false */

// Validate validates this forum post search response
func (m *ForumPostSearchResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuery(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ForumPostSearchResponse) validateQuery(formats strfmt.Registry) error {

	if swag.IsZero(m.Query) { // not required
		return nil
	}

	if m.Query != nil {

		if err := m.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ForumPostSearchResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ForumPostSearchResponse) UnmarshalBinary(b []byte) error {
	var res ForumPostSearchResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
