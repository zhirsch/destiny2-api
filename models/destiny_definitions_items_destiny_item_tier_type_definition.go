// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsItemsDestinyItemTierTypeDefinition Defines the tier type of an item. Mostly this provides human readable properties for types like Common, Rare, etc...
// It also provides some base data for infusion that could be useful.
// swagger:model Destiny.Definitions.Items.DestinyItemTierTypeDefinition

type DestinyDefinitionsItemsDestinyItemTierTypeDefinition struct {

	// display properties
	DisplayProperties *DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition `json:"displayProperties,omitempty"`

	// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
	// When entities refer to each other in Destiny content, it is this hash that they are referring to.
	Hash uint32 `json:"hash,omitempty"`

	// The index of the entity as it was found in the investment tables.
	Index int32 `json:"index,omitempty"`

	// If this tier defines infusion properties, they will be contained here.
	InfusionProcess *DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock `json:"infusionProcess,omitempty"`

	// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
	Redacted bool `json:"redacted,omitempty"`
}

/* polymorph Destiny.Definitions.Items.DestinyItemTierTypeDefinition displayProperties false */

/* polymorph Destiny.Definitions.Items.DestinyItemTierTypeDefinition hash false */

/* polymorph Destiny.Definitions.Items.DestinyItemTierTypeDefinition index false */

/* polymorph Destiny.Definitions.Items.DestinyItemTierTypeDefinition infusionProcess false */

/* polymorph Destiny.Definitions.Items.DestinyItemTierTypeDefinition redacted false */

// Validate validates this destiny definitions items destiny item tier type definition
func (m *DestinyDefinitionsItemsDestinyItemTierTypeDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInfusionProcess(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsItemsDestinyItemTierTypeDefinition) validateDisplayProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayProperties) { // not required
		return nil
	}

	if m.DisplayProperties != nil {

		if err := m.DisplayProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("displayProperties")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyDefinitionsItemsDestinyItemTierTypeDefinition) validateInfusionProcess(formats strfmt.Registry) error {

	if swag.IsZero(m.InfusionProcess) { // not required
		return nil
	}

	if m.InfusionProcess != nil {

		if err := m.InfusionProcess.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("infusionProcess")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsItemsDestinyItemTierTypeDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsItemsDestinyItemTierTypeDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsItemsDestinyItemTierTypeDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
