// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDestinyItemQuantity Used in a number of Destiny contracts to return data about an item stack and its quantity. Can optionally return an itemInstanceId if the item is instanced - in which case, the quantity returned will be 1. If it's not... uh, let me know okay? Thanks.
// swagger:model Destiny.DestinyItemQuantity

type DestinyDestinyItemQuantity struct {

	// The hash identifier for the item in question. Use it to look up the item's DestinyInventoryItemDefinition.
	ItemHash uint32 `json:"itemHash,omitempty"`

	// If this quantity is referring to a specific instance of an item, this will have the item's instance ID. Normally, this will be null.
	ItemInstanceID int64 `json:"itemInstanceId,omitempty"`

	// The amount of the item needed/available depending on the context of where DestinyItemQuantity is being used.
	Quantity int32 `json:"quantity,omitempty"`
}

/* polymorph Destiny.DestinyItemQuantity itemHash false */

/* polymorph Destiny.DestinyItemQuantity itemInstanceId false */

/* polymorph Destiny.DestinyItemQuantity quantity false */

// Validate validates this destiny destiny item quantity
func (m *DestinyDestinyItemQuantity) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDestinyItemQuantity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDestinyItemQuantity) UnmarshalBinary(b []byte) error {
	var res DestinyDestinyItemQuantity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
