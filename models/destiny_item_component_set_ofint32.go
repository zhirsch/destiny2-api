// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyItemComponentSetOfint32 destiny item component set ofint32
// swagger:model DestinyItemComponentSetOfint32

type DestinyItemComponentSetOfint32 struct {

	// instances
	Instances *DictionaryComponentResponseOfint32AndDestinyItemInstanceComponent `json:"instances,omitempty"`

	// objectives
	Objectives *DictionaryComponentResponseOfint32AndDestinyItemObjectivesComponent `json:"objectives,omitempty"`

	// perks
	Perks *DictionaryComponentResponseOfint32AndDestinyItemPerksComponent `json:"perks,omitempty"`

	// plug states
	PlugStates *DictionaryComponentResponseOfuint32AndDestinyItemPlugComponent `json:"plugStates,omitempty"`

	// render data
	RenderData *DictionaryComponentResponseOfint32AndDestinyItemRenderComponent `json:"renderData,omitempty"`

	// sockets
	Sockets *DictionaryComponentResponseOfint32AndDestinyItemSocketsComponent `json:"sockets,omitempty"`

	// stats
	Stats *DictionaryComponentResponseOfint32AndDestinyItemStatsComponent `json:"stats,omitempty"`

	// talent grids
	TalentGrids *DictionaryComponentResponseOfint32AndDestinyItemTalentGridComponent `json:"talentGrids,omitempty"`
}

/* polymorph DestinyItemComponentSetOfint32 instances false */

/* polymorph DestinyItemComponentSetOfint32 objectives false */

/* polymorph DestinyItemComponentSetOfint32 perks false */

/* polymorph DestinyItemComponentSetOfint32 plugStates false */

/* polymorph DestinyItemComponentSetOfint32 renderData false */

/* polymorph DestinyItemComponentSetOfint32 sockets false */

/* polymorph DestinyItemComponentSetOfint32 stats false */

/* polymorph DestinyItemComponentSetOfint32 talentGrids false */

// Validate validates this destiny item component set ofint32
func (m *DestinyItemComponentSetOfint32) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstances(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateObjectives(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePerks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePlugStates(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRenderData(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSockets(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTalentGrids(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyItemComponentSetOfint32) validateInstances(formats strfmt.Registry) error {

	if swag.IsZero(m.Instances) { // not required
		return nil
	}

	if m.Instances != nil {

		if err := m.Instances.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instances")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyItemComponentSetOfint32) validateObjectives(formats strfmt.Registry) error {

	if swag.IsZero(m.Objectives) { // not required
		return nil
	}

	if m.Objectives != nil {

		if err := m.Objectives.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectives")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyItemComponentSetOfint32) validatePerks(formats strfmt.Registry) error {

	if swag.IsZero(m.Perks) { // not required
		return nil
	}

	if m.Perks != nil {

		if err := m.Perks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perks")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyItemComponentSetOfint32) validatePlugStates(formats strfmt.Registry) error {

	if swag.IsZero(m.PlugStates) { // not required
		return nil
	}

	if m.PlugStates != nil {

		if err := m.PlugStates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plugStates")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyItemComponentSetOfint32) validateRenderData(formats strfmt.Registry) error {

	if swag.IsZero(m.RenderData) { // not required
		return nil
	}

	if m.RenderData != nil {

		if err := m.RenderData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renderData")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyItemComponentSetOfint32) validateSockets(formats strfmt.Registry) error {

	if swag.IsZero(m.Sockets) { // not required
		return nil
	}

	if m.Sockets != nil {

		if err := m.Sockets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sockets")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyItemComponentSetOfint32) validateStats(formats strfmt.Registry) error {

	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {

		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *DestinyItemComponentSetOfint32) validateTalentGrids(formats strfmt.Registry) error {

	if swag.IsZero(m.TalentGrids) { // not required
		return nil
	}

	if m.TalentGrids != nil {

		if err := m.TalentGrids.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("talentGrids")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyItemComponentSetOfint32) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyItemComponentSetOfint32) UnmarshalBinary(b []byte) error {
	var res DestinyItemComponentSetOfint32
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
