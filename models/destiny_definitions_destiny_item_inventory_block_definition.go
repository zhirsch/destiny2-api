// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyItemInventoryBlockDefinition If the item can exist in an inventory - the overwhelming majority of them can and do - then this is the basic properties regarding the item's relationship with the inventory.
// swagger:model Destiny.Definitions.DestinyItemInventoryBlockDefinition

type DestinyDefinitionsDestinyItemInventoryBlockDefinition struct {

	// The hash identifier for the DestinyInventoryBucketDefinition to which this item belongs. I should have named this "bucketHash", but too many things refer to it now. Sigh.
	BucketTypeHash uint32 `json:"bucketTypeHash,omitempty"`

	// If TRUE, this item is instanced. Otherwise, it is a generic item that merely has a quantity in a stack (like Glimmer).
	IsInstanceItem bool `json:"isInstanceItem,omitempty"`

	// The maximum quantity of this item that can exist in a stack.
	MaxStackSize int32 `json:"maxStackSize,omitempty"`

	// If the item is picked up by the lost loot queue, this is the hash identifier for the DestinyInventoryBucketDefinition into which it will be placed. Again, I should have named this recoveryBucketHash instead.
	RecoveryBucketTypeHash uint32 `json:"recoveryBucketTypeHash,omitempty"`

	// If this string is populated, you can't have more than one stack with this label in a given inventory. Note that this is different from the equipping block's unique label, which is used for equipping uniqueness.
	StackUniqueLabel string `json:"stackUniqueLabel,omitempty"`

	// The enumeration matching the tier type of the item to known values, again for convenience sake.
	TierType DestinyTierType `json:"tierType,omitempty"`

	// The hash identifier for the Tier Type of the item, use to look up its DestinyItemTierTypeDefinition if you need to show localized data for the item's tier.
	TierTypeHash uint32 `json:"tierTypeHash,omitempty"`

	// The localized name of the tier type, which is a useful shortcut so you don't have to look up the definition every time. However, it's mostly a holdover from days before we had a DestinyItemTierTypeDefinition to refer to.
	TierTypeName string `json:"tierTypeName,omitempty"`
}

/* polymorph Destiny.Definitions.DestinyItemInventoryBlockDefinition bucketTypeHash false */

/* polymorph Destiny.Definitions.DestinyItemInventoryBlockDefinition isInstanceItem false */

/* polymorph Destiny.Definitions.DestinyItemInventoryBlockDefinition maxStackSize false */

/* polymorph Destiny.Definitions.DestinyItemInventoryBlockDefinition recoveryBucketTypeHash false */

/* polymorph Destiny.Definitions.DestinyItemInventoryBlockDefinition stackUniqueLabel false */

/* polymorph Destiny.Definitions.DestinyItemInventoryBlockDefinition tierType false */

/* polymorph Destiny.Definitions.DestinyItemInventoryBlockDefinition tierTypeHash false */

/* polymorph Destiny.Definitions.DestinyItemInventoryBlockDefinition tierTypeName false */

// Validate validates this destiny definitions destiny item inventory block definition
func (m *DestinyDefinitionsDestinyItemInventoryBlockDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTierType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsDestinyItemInventoryBlockDefinition) validateTierType(formats strfmt.Registry) error {

	if swag.IsZero(m.TierType) { // not required
		return nil
	}

	if err := m.TierType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tierType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyItemInventoryBlockDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyItemInventoryBlockDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyItemInventoryBlockDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
