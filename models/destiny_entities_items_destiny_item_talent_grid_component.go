// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyEntitiesItemsDestinyItemTalentGridComponent Well, we're here in Destiny 2, and Talent Grids are unfortunately still around.
// The good news is that they're pretty much only being used for certain base information on items and for Builds/Subclasses. The bad news is that they still suck. If you really want this information, grab this component.
// An important note is that talent grids are defined as such:
// A Grid has 1:M Nodes, which has 1:M Steps.
// Any given node can only have a single step active at one time, which represents the actual visual contents and effects of the Node (for instance, if you see a "Super Cool Bonus" node, the actual icon and text for the node is coming from the current Step of that node).
// Nodes can be grouped into exclusivity sets *and* as of D2, exclusivity groups (which are collections of exclusivity sets that affect each other).
// See DestinyTalentGridDefinition for more information. Brace yourself, the water's cold out there in the deep end.
// swagger:model Destiny.Entities.Items.DestinyItemTalentGridComponent

type DestinyEntitiesItemsDestinyItemTalentGridComponent struct {

	// If the item has a progression, it will be detailed here. A progression means that the item can gain experience. Thresholds of experience are what determines whether and when a talent node can be activated.
	GridProgression *DestinyDestinyProgression `json:"gridProgression,omitempty"`

	// Indicates whether the talent grid on this item is completed, and thus whether it should have a gold border around it.
	// Only will be true if the item actually *has* a talent grid, and only then if it is completed (i.e. every exclusive set has an activated node, and every non-exclusive set node has been activated)
	IsGridComplete bool `json:"isGridComplete,omitempty"`

	// nodes
	Nodes DestinyEntitiesItemsDestinyItemTalentGridComponentNodes `json:"nodes"`

	// Most items don't have useful talent grids anymore, but Builds in particular still do.
	// You can use this hash to lookup the DestinyTalentGridDefinition attached to this item, which will be crucial for understanding the node values on the item.
	TalentGridHash uint32 `json:"talentGridHash,omitempty"`
}

/* polymorph Destiny.Entities.Items.DestinyItemTalentGridComponent gridProgression false */

/* polymorph Destiny.Entities.Items.DestinyItemTalentGridComponent isGridComplete false */

/* polymorph Destiny.Entities.Items.DestinyItemTalentGridComponent nodes false */

/* polymorph Destiny.Entities.Items.DestinyItemTalentGridComponent talentGridHash false */

// Validate validates this destiny entities items destiny item talent grid component
func (m *DestinyEntitiesItemsDestinyItemTalentGridComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGridProgression(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyEntitiesItemsDestinyItemTalentGridComponent) validateGridProgression(formats strfmt.Registry) error {

	if swag.IsZero(m.GridProgression) { // not required
		return nil
	}

	if m.GridProgression != nil {

		if err := m.GridProgression.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gridProgression")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyEntitiesItemsDestinyItemTalentGridComponent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyEntitiesItemsDestinyItemTalentGridComponent) UnmarshalBinary(b []byte) error {
	var res DestinyEntitiesItemsDestinyItemTalentGridComponent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
