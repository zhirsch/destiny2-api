// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsDestinyItemSocketBlockDefinition If defined, the item has at least one socket.
// swagger:model Destiny.Definitions.DestinyItemSocketBlockDefinition

type DestinyDefinitionsDestinyItemSocketBlockDefinition struct {

	// This was supposed to be a string that would give per-item details about sockets. In practice, it turns out that all this ever has is the localized word "details". ... that's lame, but perhaps it will become something cool in the future.
	Detail string `json:"detail,omitempty"`

	// socket categories
	SocketCategories DestinyDefinitionsDestinyItemSocketBlockDefinitionSocketCategories `json:"socketCategories"`

	// socket entries
	SocketEntries DestinyDefinitionsDestinyItemSocketBlockDefinitionSocketEntries `json:"socketEntries"`
}

/* polymorph Destiny.Definitions.DestinyItemSocketBlockDefinition detail false */

/* polymorph Destiny.Definitions.DestinyItemSocketBlockDefinition socketCategories false */

/* polymorph Destiny.Definitions.DestinyItemSocketBlockDefinition socketEntries false */

// Validate validates this destiny definitions destiny item socket block definition
func (m *DestinyDefinitionsDestinyItemSocketBlockDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyItemSocketBlockDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsDestinyItemSocketBlockDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsDestinyItemSocketBlockDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
