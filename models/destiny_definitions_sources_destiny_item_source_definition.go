// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DestinyDefinitionsSourcesDestinyItemSourceDefinition Properties of a DestinyInventoryItemDefinition that store all of the information we were able to discern about how the item spawns, and where you can find the item.
// Items will have many of these sources, one per level at which it spawns, to try and give more granular data about where items spawn for specific level ranges.
// swagger:model Destiny.Definitions.Sources.DestinyItemSourceDefinition

type DestinyDefinitionsSourcesDestinyItemSourceDefinition struct {

	// computed stats
	ComputedStats DestinyDefinitionsSourcesDestinyItemSourceDefinitionComputedStats `json:"computedStats,omitempty"`

	// The level at which the item spawns. Essentially the Primary Key for this source data: there will be multiple of these source entries per item that has source data, grouped by the level at which the item spawns.
	Level int32 `json:"level,omitempty"`

	// The maximum Character Level required for equipping the item when the item spawns at the item level defined on this DestinyItemSourceDefinition, as far as we saw in our processing.
	MaxLevelRequired int32 `json:"maxLevelRequired,omitempty"`

	// The maximum quality at which the item spawns for this level.
	MaxQuality int32 `json:"maxQuality,omitempty"`

	// The minimum Character Level required for equipping the item when the item spawns at the item level defined on this DestinyItemSourceDefinition, as far as we saw in our processing.
	MinLevelRequired int32 `json:"minLevelRequired,omitempty"`

	// The minimum Quality at which the item spawns for this level. Examine DestinyInventoryItemDefinition for more information about what Quality means. Just don't ask Phaedrus about it, he'll never stop talking and you'll have to write a book about it.
	MinQuality int32 `json:"minQuality,omitempty"`

	// The DestinyRewardSourceDefinitions found that can spawn the item at this level.
	SourceHashes []uint32 `json:"sourceHashes"`
}

/* polymorph Destiny.Definitions.Sources.DestinyItemSourceDefinition computedStats false */

/* polymorph Destiny.Definitions.Sources.DestinyItemSourceDefinition level false */

/* polymorph Destiny.Definitions.Sources.DestinyItemSourceDefinition maxLevelRequired false */

/* polymorph Destiny.Definitions.Sources.DestinyItemSourceDefinition maxQuality false */

/* polymorph Destiny.Definitions.Sources.DestinyItemSourceDefinition minLevelRequired false */

/* polymorph Destiny.Definitions.Sources.DestinyItemSourceDefinition minQuality false */

/* polymorph Destiny.Definitions.Sources.DestinyItemSourceDefinition sourceHashes false */

// Validate validates this destiny definitions sources destiny item source definition
func (m *DestinyDefinitionsSourcesDestinyItemSourceDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceHashes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestinyDefinitionsSourcesDestinyItemSourceDefinition) validateSourceHashes(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceHashes) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestinyDefinitionsSourcesDestinyItemSourceDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestinyDefinitionsSourcesDestinyItemSourceDefinition) UnmarshalBinary(b []byte) error {
	var res DestinyDefinitionsSourcesDestinyItemSourceDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
